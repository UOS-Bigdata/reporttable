[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R 과 Quarto 를 이용한 데이터 테이블 작성",
    "section": "",
    "text": "개요",
    "crumbs": [
      "개요"
    ]
  },
  {
    "objectID": "index.html#목표-및-개요",
    "href": "index.html#목표-및-개요",
    "title": "R 과 Quarto 를 이용한 데이터 테이블 작성",
    "section": "목표 및 개요",
    "text": "목표 및 개요",
    "crumbs": [
      "개요"
    ]
  },
  {
    "objectID": "index.html#내용-요약-및-범위",
    "href": "index.html#내용-요약-및-범위",
    "title": "R 과 Quarto 를 이용한 데이터 테이블 작성",
    "section": "내용 요약 및 범위",
    "text": "내용 요약 및 범위\n\n결측값에 대한 기초 분석과 기본적인 대체방법에 대하여 소개\n\nR 언어로 보고서용 데이터 테이블을 자동으로 작성하는 방법 소개\nflextable 패키지를 이용하여 고급 품질의 테이블 작성 방법 소개\n테이블을 포함한 보고서를 다양한 형식(MS Word, PDF, MS Excel)으로 생성하는 방법 소개",
    "crumbs": [
      "개요"
    ]
  },
  {
    "objectID": "index.html#활용범위-및-기대효과",
    "href": "index.html#활용범위-및-기대효과",
    "title": "R 과 Quarto 를 이용한 데이터 테이블 작성",
    "section": "활용범위 및 기대효과",
    "text": "활용범위 및 기대효과",
    "crumbs": [
      "개요"
    ]
  },
  {
    "objectID": "index.html#분석에-필요한-것들",
    "href": "index.html#분석에-필요한-것들",
    "title": "R 과 Quarto 를 이용한 데이터 테이블 작성",
    "section": "분석에 필요한 것들",
    "text": "분석에 필요한 것들\n\n\n\n\n\n\n필요한 선행 지식\n\n\n\n이 교과서를 공부하기 위해서는 다음과 같은 선행지식이 필요합니다.\n\nR 언어의 기초: 기본적인 프로그래밍의 문법, 패키지 사용, data.frame 에 대한 정의 및 기초,\n\n기초 통계학: 연속형 자료와 범주형 자료에 대한 요약 통계량(평균, 표준편차, 비율 등 ), 회귀분석의 기초\n\n\n\n\n프로그램\n\nR: 데이터 사이언스를 위한 컴퓨터 언어\nRstudio : R 언어를 사용하기 위한 GUI\nQuarto 는 오픈소스로 공개된 과학기술 분야의 출판 시스템니다 (Allaire 기타 (2024) 참고)\n\n\n\nR 패키지\n이 책애서 사용하는 R 패키지는 다음과 같다.\nlibrary(here)\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(DescTools)\nlibrary(mice)\nlibrary(ggmice)\nlibrary(naniar)\nlibrary(flextable)\nlibrary(broom)\nlibrary(sjtable2df)\n\n\n예제 자료\n\n국민체력100 측정자료\n\n출처: 문화빅데이터 프랫폼 - 서울올림픽기념국민체육진흥공단\n데이터 소개\n\n서울올림픽기념 국민체육진흥공단에서 관리하고 있는 국민체력측정데이터의 항목별 측정 정보를 제공하는 데이터\n체력측정 센터명, 연령대, 신장, 체중, 윗몸일으키기, BMI, 제자리 멀리뛰기 등의 체력측정 항목별 결과를 조회 가능\n\n\n\n\n2019년 서울특별시 부동산 실거래가 자료\n\n출처: 서울 열린데이터 광장\n데이터 소개\n\n서울 열린 데이터 광장에서 2019년 서울특별시 부동산 실거래가 정보를 가진 자료\n2019년 거래하여 신고한 주택들의 위치와 정보 그리고 실거래 가격이 포함된 총 67238건의 거래자료 중 일부 자료와 함성자료\n\n\n\n\n\n\nAllaire, J. J., Charles Teague, Carlos Scheidegger, Yihui Xie, Christophe Dervieux, 와/과 Gordon Woodhull. 2024. “Quarto”. https://doi.org/10.5281/zenodo.5960048.",
    "crumbs": [
      "개요"
    ]
  },
  {
    "objectID": "docs/chapter-00.html",
    "href": "docs/chapter-00.html",
    "title": "1  효율적인 통계의 생산",
    "section": "",
    "text": "1.1 재현 가능한 통계 업무\n과학적 연구에서 중요한 원칙 중 하나는 연구 결과의 재현 가능성(reproducibility)이다. 이는 동일한 환경과 동일한 방법을 사용하여 연구를 수행할 때, 항상 같은 결과를 얻을 수 있는 특성을 의미한다. 즉, 연구자가 동일한 실험이나 분석을 반복할 경우뿐만 아니라, 다른 연구자가 동일한 절차를 따라 연구를 수행했을 때도 같은 결론에 도달할 수 있어야 한다. 이는 연구의 신뢰성을 확보하는 핵심 요소로 작용한다.\n재현 가능성은 특히 통계 업무에서 필수적인 요소이다. 데이터를 분석하고 해석하는 과정에서 일관된 결과를 얻는 것이 중요하며, 이는 연구뿐만 아니라 실무에서도 중요한 가치를 지닌다. 통계 업무에서 재현 가능성이 중요한 이유는 크게 지속성과 효율성의 두 가지 측면에서 설명할 수 있다.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>효율적인 통계의 생산</span>"
    ]
  },
  {
    "objectID": "docs/chapter-00.html#재현-가능한-통계-업무",
    "href": "docs/chapter-00.html#재현-가능한-통계-업무",
    "title": "1  효율적인 통계의 생산",
    "section": "",
    "text": "지속성: 연구와 업무의 연속성 유지\n재현 가능성이 확보되면, 시간이 지나거나 담당자가 변경되더라도 유사한 업무를 쉽게 반복적으로 수행할 수 있다. 즉, 특정 분석 작업이 연구자의 개인적인 역량에 의존하지 않고, 체계적인 시스템을 기반으로 수행될 수 있도록 한다. 이를 통해 조직 내에서 안정적으로 데이터를 활용하고 연구를 지속할 수 있으며, 동일한 연구를 반복할 때에도 일관된 결과를 얻을 수 있다.\n\n\n\n효율성: 분석 과정의 표준화 및 확장 가능성\n재현 가능한 연구 환경에서는 분석 과정이 표준화된 코드로 연결되고 구성되므로, 동일한 절차를 반복하는 데 드는 시간과 노력을 줄일 수 있다. 또한, 연구나 업무의 요구사항이 변화하더라도 기존의 분석 코드나 방법을 쉽게 수정하고 확장할 수 있다. 이는 새로운 데이터가 추가되거나 분석의 방향이 수정될 때도 빠르고 유연하게 대응할 수 있도록 해준다.\n더 나아가, 협업 환경에서도 재현 가능성은 큰 장점이 된다. 동일한 코드와 데이터를 공유함으로써 팀원 간의 원활한 협업이 가능하며, 연구나 업무의 일관성을 유지할 수 있다. 이는 조직 내에서 분석 결과의 신뢰도를 높이고, 효율적인 의사 결정을 지원하는 중요한 요소로 작용한다.\n재현 가능성은 연구의 신뢰성과 투명성을 보장하는 필수적인 요소이며, 통계 업무에서도 그 중요성이 크다. 지속적으로 업무를 수행할 수 있도록 하며, 효율적인 분석을 가능하게 함으로써 연구자와 실무자 모두에게 유익한 환경을 제공한다. 따라서 연구 및 데이터 분석을 수행하는 모든 과정에서 재현 가능성을 높이는 것이 바람직하다.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>효율적인 통계의 생산</span>"
    ]
  },
  {
    "objectID": "docs/chapter-00.html#자료의-관리와-통계의-생산",
    "href": "docs/chapter-00.html#자료의-관리와-통계의-생산",
    "title": "1  효율적인 통계의 생산",
    "section": "1.2 자료의 관리와 통계의 생산",
    "text": "1.2 자료의 관리와 통계의 생산\n통계를 신뢰할 수 있도록 유지하고 활용하기 위해서는 원천 자료(source data; master data)와 메타정보(meta data)의 체계적인 관리가 필수적이다. 원천 자료는 모든 통계 생산의 기초가 되는 데이터이며, 메타정보는 해당 자료에 대한 설명과 구조를 정의하는 정보를 의미한다. 이러한 자료를 체계적으로 관리해야 일관된 통계를 생산할 수 있으며, 변화하는 데이터 환경에서도 효율적으로 대응할 수 있다.\n\n체계적인 원천 자료 및 메타정보 관리\n통계의 신뢰성과 재현 가능성을 보장하기 위해서는 원천 자료와 이를 설명하는 메타정보가 지속적으로 관리될 필요가 있다. 특히, 원천 자료가 변경될 경우 이를 바탕으로 생성된 중간 자료들도 자동으로 업데이트되는 체계를 갖추는 것이 중요하다. 이를 통해 데이터의 일관성을 유지하고, 새로운 데이터가 추가되더라도 기존의 분석 결과를 손쉽게 갱신할 수 있다. 또한, 메타정보 역시 원천 자료와 동일한 위치에서 지속적으로 관리되어야 한다. 이렇게 하면 데이터가 변하더라도 그 의미와 구조를 일관되게 유지할 수 있어, 분석 과정에서 혼란을 줄이고 효율성을 높일 수 있다.\n\n\n재현 가능한 통계 생산 체계 구축\n통계를 생산하는 과정은 체계적으로 프로그램화되고 연결되어야 하며, 필요에 따라 쉽게 수정할 수 있어야 한다. 즉, 단순히 데이터를 분석하는 것이 아니라, 재현 가능한 통계 생산 체계를 갖추는 것이 중요하다. 이를 위해 모든 분석 과정이 자동화되고, 변경 사항이 발생했을 때도 별도의 수작업 없이 업데이트될 수 있어야 한다.\n그러나 현실에서는 수작업을 기반으로 한 통계 생산 방식이 여전히 많이 사용되고 있다. 예를 들어, 엑셀을 이용한 통계 생산 방식은 타인이 동일한 결과를 재현하기 어려운 경우가 많다. 엑셀 파일 내에서 수식이 숨겨져 있거나, 데이터가 수동으로 수정되는 경우가 발생하기 때문이다. 따라서, 신뢰할 수 있는 통계 시스템을 구축하기 위해서는 엑셀과 같은 개별적인 도구에 의존하는 방식에서 벗어나, 자동화된 분석 코드와 체계적인 데이터 관리 시스템을 활용하는 것이 필요하다.\n통계의 신뢰성과 재현 가능성을 높이기 위해서는 원천 자료와 메타정보를 체계적으로 관리하고, 통계 생산 과정 전체를 자동화된 시스템으로 구축하는 것이 중요하다. 이를 통해 데이터의 변경에도 신속하게 대응할 수 있으며, 분석 과정에서의 오류를 최소화할 수 있다. 궁극적으로 이러한 체계적인 접근 방식은 보다 정확하고 신뢰할 수 있는 통계 생산을 가능하게 한다.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>효율적인 통계의 생산</span>"
    ]
  },
  {
    "objectID": "docs/chapter-01.html",
    "href": "docs/chapter-01.html",
    "title": "2  결측자료의 발생원인과 유형",
    "section": "",
    "text": "2.1 서론\n이장에서는 결측자료의 발생원인과 유형에 대하여 살펴보고 싱제 자료를 이용한 결측값에 대한 처리를 연습해 본다.에 대한 전반적인 이해를 해보자.\n데이터 분석에서 신뢰할 수 있는 결과를 도출하기 위해서는 정확하고 완전한 데이터를 확보하는 것이 필수적이다. 그러나 현실에서는 다양한 이유로 인해 데이터의 일부가 누락되는 결측값(missing data) 문제가 발생한다. 결측값은 데이터 수집, 입력, 저장, 관리 등의 다양한 과정에서 생길 수 있으며, 연구 설계 및 방법론의 한계로 인해 발생하기도 한다. 이러한 결측값은 단순한 누락된 정보 이상의 의미를 가지며, 분석의 신뢰성과 해석 가능성에 큰 영향을 미칠 수 있다.\n결측값이 포함된 데이터는 표본의 대표성을 저하시킬 수 있으며, 분석 결과를 왜곡시킬 가능성이 크다. 또한, 결측값을 처리하는 방식에 따라 분석 결과가 달라질 수 있어 연구자가 신중하게 접근해야 한다. 특히, 통계적 검정과 추정의 정확도가 낮아지거나, 데이터 활용의 효율성이 감소하는 등의 문제가 발생할 수 있다. 따라서 결측값이 발생하는 원인을 파악하고, 이에 대한 적절한 처리 방법을 적용하는 것은 데이터 분석에서 필수적인 과정이다.\n이 장에서는 결측값이 발생하는 주요 원인을 분석하고, 결측값이 통계 분석에 미치는 영향을 체계적으로 살펴본다. 이를 통해 데이터의 완전성을 유지하고 분석 결과의 신뢰성을 높이는 전략을 모색할 수 있을 것이다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>결측자료의  발생원인과 유형</span>"
    ]
  },
  {
    "objectID": "docs/chapter-01.html#결측값-발생-원인과-영향",
    "href": "docs/chapter-01.html#결측값-발생-원인과-영향",
    "title": "2  결측자료의 발생원인과 유형",
    "section": "2.2 결측값 발생 원인과 영향",
    "text": "2.2 결측값 발생 원인과 영향\n데이터 분석에서 결측값은 연구의 신뢰성을 저하시킬 수 있는 중요한 요소이다. 결측값이 발생하는 원인은 다양하며, 이는 데이터 수집, 입력 및 처리, 저장 및 관리, 연구 설계 등의 과정에서 나타날 수 있다. 또한, 결측값은 통계 분석의 정확성과 신뢰성에도 영향을 미칠 수 있어 이에 대한 적절한 이해와 처리가 필수적이다.\n\n결측값 발생 원인\n결측값은 데이터가 정상적으로 수집·입력·저장되지 못한 경우 발생하며, 그 원인은 다음과 같이 네 가지 주요 과정에서 찾을 수 있다.\n\n데이터 수집 과정의 문제\n데이터가 처음 수집되는 단계에서 결측값이 발생할 수 있다.\n\n설문조사 응답 누락: 조사 대상자가 질문에 답변하지 않는 경우 발생하며, 이는 의도적인 응답 회피, 무지, 무관심 등의 요인으로 인해 발생할 수 있다.\n\n기술적 문제: 장비의 고장이나 네트워크 장애로 인해 데이터가 정상적으로 기록되지 않는 경우도 있다.\n\n\n\n데이터 입력 및 처리 과정의 문제\n데이터가 입력되거나 변환되는 과정에서 실수나 오류로 인해 결측값이 발생할 수 있다.\n\n데이터 입력 오류: 수작업으로 데이터를 입력할 때 실수가 발생하거나, 자동 입력 시스템에서 오류가 발생할 수 있다.\n\n데이터 처리 및 변환 오류: 데이터 변환 과정에서 적절한 값이 입력되지 않거나, 오류로 인해 일부 값이 손실될 수 있다.\n\n\n\n데이터 저장 및 관리 과정의 문제\n데이터가 저장되고 관리되는 과정에서도 결측값이 발생할 가능성이 있다.\n\n데이터베이스 관리 문제: 저장 공간의 제한으로 인해 일부 데이터가 삭제되거나, 데이터 정리 과정에서 중요한 값이 누락될 수 있다.\n\n백업 및 복원 문제: 백업 과정에서 일부 데이터가 저장되지 않거나, 복원 시 손실되는 경우도 결측값의 원인이 된다.\n\n\n\n연구 설계 및 방법론의 문제\n연구 설계 자체의 한계로 인해 데이터를 충분히 확보하지 못하는 경우도 있다.\n\n연구 설계의 불완전성: 중요한 변수가 설계에서 누락되었거나, 질문이 부적절하게 구성되었을 경우 특정 값이 수집되지 못할 수 있다.\n\n데이터 수집 방법의 한계: 표본 설계에서 오류가 발생하면 특정 그룹의 데이터가 충분히 확보되지 못하여 결측값이 발생할 가능성이 있다.\n\n\n\n\n결측값이 통계 분석에 미치는 영향\n결측값은 통계 분석의 신뢰성을 저하시킬 수 있으며, 분석 결과의 해석과 활용에 여러 가지 문제를 야기할 수 있다. 결측값이 미치는 주요 영향은 다음과 같다.\n\n통계적 추정의 정확성 저하\n\n표본 크기의 감소: 결측값을 포함한 데이터를 제거하면 전체 표본 크기가 줄어들어 통계적 정확도가 낮아진다. 이는 분석 결과의 신뢰도를 저하시킬 수 있으며, 표본이 모집단을 대표하는 특성을 잃을 가능성이 있다.\n\n왜곡된 추정: 결측값이 특정한 패턴을 가지고 나타날 경우 분석 결과가 편향될 수 있다. 예를 들어, 특정 그룹에서 결측값이 더 많이 발생한다면, 분석 결과가 해당 그룹의 특성을 반영하지 못할 수 있다.\n\n\n\n분석 결과의 해석 어려움\n\n해석의 모호성: 결측값을 어떻게 처리하느냐에 따라 분석 결과가 달라질 수 있으며, 이는 연구자가 분석 결과를 해석하는 데 어려움을 줄 수 있다.\n\n일반화의 제한: 특정 그룹에서 결측값이 집중적으로 발생했다면, 연구 결과를 전체 모집단에 적용하기 어려울 수 있다.\n\n\n\n데이터 분석의 효율성 감소\n\n데이터 활용 제한: 결측값이 많으면 사용할 수 있는 데이터의 양이 줄어들고, 특히 머신러닝 모델과 같은 고급 분석 기법을 적용하는 것이 어려워질 수 있다.\n\n분석 과정의 복잡성 증가: 결측값을 처리하기 위해 보간법(imputation), 대체 값 적용 등의 추가적인 작업이 필요하며, 이로 인해 분석 과정이 복잡해지고 시간이 더 소요될 수 있다.\n\n\n\n통계적 검정의 신뢰성 저하\n\n유효성 저하: 결측값이 많을 경우 수행하는 통계적 검정의 결과가 신뢰할 수 없는 수준이 될 수 있다. 이는 잘못된 결론을 초래할 위험이 있다.\n\n추정량의 분산 증가: 결측값을 대체하는 방식에 따라 데이터의 분산이 증가할 수 있으며, 이는 통계적 검정의 정확도를 낮추고 결과의 신뢰성을 저하시킬 수 있다.\n\n결측값은 데이터 분석 과정에서 피할 수 없는 문제이며, 이를 적절히 처리하지 않으면 연구의 신뢰성과 분석 결과의 정확성이 크게 저하될 수 있다. 따라서 데이터 수집, 입력, 저장, 관리 및 분석 과정에서 결측값을 최소화하기 위한 전략을 마련하는 것이 필요하다. 또한, 결측값이 발생했을 때 이를 올바르게 처리하는 방법을 적용하여 통계 분석의 신뢰성과 활용도를 높이는 것이 중요하다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>결측자료의  발생원인과 유형</span>"
    ]
  },
  {
    "objectID": "docs/chapter-01.html#결측값의-분포와-패턴",
    "href": "docs/chapter-01.html#결측값의-분포와-패턴",
    "title": "2  결측자료의 발생원인과 유형",
    "section": "2.3 결측값의 분포와 패턴",
    "text": "2.3 결측값의 분포와 패턴\n데이터 분석에서 결측값을 효과적으로 처리하기 위해서는 먼저 결측값의 분포와 패턴을 정확히 파악하는 과정이 필요하다. 단순히 결측값이 존재하는지 여부만 확인하는 것이 아니라, 결측값이 어떻게 분포되어 있으며 특정 변수 간에 어떤 관계를 형성하는지 분석하는 것이 중요하다. 이를 통해 결측값이 데이터에 미치는 영향을 평가하고, 적절한 보완 및 대체 방법을 결정할 수 있다.\n\n결측값 분석의 중요성\n데이터에 결측값이 포함되어 있을 경우, 이를 무작정 삭제하거나 단순한 대체 값으로 채우는 것은 적절하지 않을 수 있다. 왜냐하면 결측값의 발생 원인과 분포 형태에 따라 분석 결과에 미치는 영향이 다를 수 있기 때문이다. 따라서 결측값을 처리하기 전에 반드시 결측값의 분포와 구조를 면밀히 분석해야 한다.\n결측값이 특정 변수에 집중적으로 발생하는지, 여러 변수에서 동시에 나타나는지, 결측값이 일정한 패턴을 가지고 있는지 등의 요소를 파악하는 것은 이후 분석의 정확성을 높이는 데 중요한 역할을 한다.\n\n\n결측값의 분포와 패턴 분석 방법\n결측값의 구조를 이해하기 위해서는 여러 가지 분석 기법을 활용할 수 있다. 대표적인 방법은 다음과 같다.\n\n변수별 결측값 빈도 및 비율 분석\n먼저, 데이터의 각 변수에서 결측값이 얼마나 발생했는지를 파악해야 한다. 이를 위해 변수별로 결측값의 개수와 비율을 계산하는 것이 기본적인 방법이다. 특정 변수에서 결측값이 과도하게 많다면 해당 변수를 분석에 포함할 것인지, 대체 값을 사용할 것인지 등을 고려해야 한다.\n\n\n여러 변수에서의 결측값 위치 및 패턴 분석\n데이터에 존재하는 여러 변수들 간의 결측값 분포를 확인하는 것도 중요하다. 특정 변수에서 결측값이 발생할 때 다른 변수에서도 동일한 패턴으로 결측값이 발생하는지 확인하는 과정이 필요하다. 이를 통해 결측값이 무작위(random missing)인지, 아니면 특정한 규칙을 가지고 있는지 판단할 수 있다.\n\n\n변수 간 결측값의 관계 분석\n일부 변수에서 발생한 결측값이 다른 변수의 결측값과 관련되어 있을 수 있다. 예를 들어, 특정 연령대에서 설문 응답이 누락되는 패턴이 있다면, 연령 변수와 설문 응답 변수 간의 연관성을 고려해야 한다. 이를 파악하기 위해 변수 간의 결측값 관계를 분석하는 것이 필요하다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>결측자료의  발생원인과 유형</span>"
    ]
  },
  {
    "objectID": "docs/chapter-01.html#결측값-대체",
    "href": "docs/chapter-01.html#결측값-대체",
    "title": "2  결측자료의 발생원인과 유형",
    "section": "2.4 결측값 대체",
    "text": "2.4 결측값 대체\n데이터 분석에서 결측값을 적절히 처리하는 것은 연구의 신뢰성을 보장하는 중요한 요소이다. 결측값을 방치하면 분석 결과의 왜곡을 초래할 수 있으며, 잘못된 결론으로 이어질 위험이 크다. 하지만 모든 결측값이 동일한 방식으로 처리될 수 있는 것은 아니다. 데이터의 특성과 결측값 발생 패턴에 따라 적절한 처리 방법을 신중히 선택해야 한다.\n결측값을 처리하는 다양한 방법이 존재하지만, 특정한 상황에서 반드시 사용해야 하는 고정된 방법은 없다. 그렇기 때문에 연구자는 전반적인 결측값 처리 기법을 숙지한 후, 데이터의 특성과 분석 목적에 맞는 방법을 직접 선택하는 것이 바람직하다.\n\n\n\n\n\n\n결측값을 대체하는 것보다 중요한 것은 예방이다\n\n\n\n데이터 분석에서 결측값을 처리하는 다양한 방법이 존재하지만, 보다 근본적으로 중요한 것은 애초에 결측값이 발생하지 않도록 하는 것이다. 결측값이 발생한 후 이를 보완하는 작업은 필연적으로 분석의 신뢰성을 저하시킬 위험이 있으며, 데이터의 원래 정보를 온전히 복원하기 어렵다. 따라서 결측값을 줄이기 위한 사전 예방 조치가 무엇보다 중요하며, 이는 시간과 비용을 투자할 가치가 있는 과정이다.\n많은 연구와 실무에서 결측값이 발생하면 이를 삭제하거나 평균값, 회귀 모델 등을 활용하여 대체하는 방식으로 해결하려 한다. 하지만 어떤 방법을 사용하든, 결측값을 대체한 데이터는 원본 데이터와 동일한 정보량을 갖지 못한다는 점을 간과해서는 안 된다. 결측값 대체 과정에서 데이터의 변동성이 줄어들거나, 특정 패턴이 왜곡될 수 있으며, 결과적으로 분석의 신뢰성과 예측력도 낮아질 가능성이 크다.\n\n\n결측값을 최소화하는 것이 중요하다. 하지만 현실적으로 결측값이 발생하는 경우, 다양한 보완 방법을 활용하여 데이터를 최대한 보존하는 방향으로 처리해야 한다.\n\n삭제법 (Deletion Method)\n\n가장 직관적인 방법은 결측값이 포함된 데이터를 제거하는 것이다. 여기에는 두 가지 방식이 있다.\n\n행 삭제 (Listwise Deletion): 결측값이 포함된 레코드(행)를 제거하는 방식\n\n열 삭제 (Variable Deletion): 특정 변수(열)에서 결측값이 많을 경우, 해당 변수를 분석에서 제외하는 방식\n이 방법은 데이터가 완전 무작위로 결측되는 경우(MCAR; Missing Completely At Random) 유용할 수 있다. 그러나 데이터 손실이 크며, 표본 크기가 급격히 줄어들 수 있다는 단점이 있다.\n\n\n단순 대체법 (Simple Imputation)\n\n결측값을 특정한 값으로 대체하는 방식으로, 비교적 간단하고 빠르게 적용할 수 있다.\n\nHot Deck 대체법: 결측된 레코드를 동일한 특성을 가진 다른 레코드의 값으로 대체\n\n평균(중앙값) 대체: 연속형 변수의 결측값을 해당 변수의 평균(mean) 또는 중앙값(median)으로 대체\n\n최빈값(Mode) 대체: 범주형 변수의 경우, 가장 많이 나타난 값(최빈값, mode)으로 대체\n\n이 방법은 계산이 쉽고 빠르지만, 데이터의 분산을 감소시키고 편향을 초래할 가능성이 있다는 한계가 있다.\n\n예측 모델 기반 대체 (Model-Based Imputation)\n\n보다 정교한 접근법으로, 회귀 분석이나 거리 기반 알고리즘을 활용하여 결측값을 예측하는 방법이다.\n\n회귀 대체법 (Regression Imputation): 다른 변수들을 활용하여 회귀 모델을 생성하고, 이 모델을 사용해 결측값을 예측하여 대체\n\n거리 대체법 (Nearest Neighbor Imputation): 결측값이 없는 데이터 포인트와 가장 유사한 레코드를 찾아 해당 값을 대체\n\n이 방법은 단순 대체법보다 데이터의 패턴을 더 잘 반영할 수 있지만, 모델이 올바르게 설정되지 않으면 추정값이 실제 데이터와 다르게 왜곡될 위험이 있다.\n\n다중 대체법 (Multiple Imputation, MI)\n\n다중 대체법은 결측값을 여러 번 대체하여 데이터의 불확실성을 반영하는 방법이다.\n\n동일한 결측값에 대해 여러 번 대체 수행 (예: 5회, 10회)\n\n각 대체본(imputed dataset)은 결측값이 서로 다른 값으로 대체된 별도의 데이터셋\n\n최종 분석 시 여러 개의 대체본을 통합하여 결측값 처리의 불확실성을 반영\n\n이 방법은 결측값을 처리하는 가장 발전된 기법 중 하나로, 통계적 추론에서 보다 신뢰할 수 있는 결과를 제공한다. 다만, 계산 과정이 복잡하고 추가적인 연산이 필요하다는 점이 단점이다.\n\n\n결측값 처리 방법은 데이터의 특성과 분석 목적에 따라 신중하게 선택해야 한다. 무조건적인 삭제는 데이터 손실을 초래할 수 있으며, 단순 대체법은 분석 결과를 왜곡할 가능성이 있다. 보다 정교한 예측 모델 기반 대체법이나 다중 대체법을 활용하면 데이터의 패턴을 보존하면서도 결측값 문제를 효과적으로 해결할 수 있다.\n궁극적으로 중요한 것은 결측값이 분석 결과에 미치는 영향을 최소화하는 방향으로 처리 전략을 설정하는 것이다. 연구자는 다양한 방법을 이해하고, 데이터의 특성을 고려하여 최적의 접근법을 선택하는 것이 필요하다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>결측자료의  발생원인과 유형</span>"
    ]
  },
  {
    "objectID": "docs/chapter-01.html#실습-결측값의-검토와-패턴-분석",
    "href": "docs/chapter-01.html#실습-결측값의-검토와-패턴-분석",
    "title": "2  결측자료의 발생원인과 유형",
    "section": "2.5 실습: 결측값의 검토와 패턴 분석",
    "text": "2.5 실습: 결측값의 검토와 패턴 분석\n다양한 라이브러리를 활용하면 결측값의 위치와 패턴을 직관적으로 확인할 수 있으며, 이를 통해 결측값이 무작위로 발생한 것인지, 특정 그룹이나 변수에 집중적으로 나타나는지를 분석할 수 있다. 이러한 분석은 결측값 처리 방법을 결정하는 중요한 기초 자료가 되며, 분석 결과의 신뢰성을 높이는 데 기여한다.\n결측값을 효과적으로 처리하기 위해서는 먼저 데이터 내에서 결측값이 어떻게 분포하고 있는지를 분석하는 과정이 필수적이다. 변수별 결측값의 빈도와 비율을 분석하고, 여러 변수 간 결측값의 위치와 패턴을 살펴봄으로써 결측값이 연구 결과에 미칠 영향을 최소화할 수 있다. 이를 위해 적절한 통계 프로그램과 시각화 기법을 활용하면 보다 정확한 결측값 분석이 가능하며, 이후의 데이터 처리 및 분석 과정에서 신뢰성을 확보할 수 있다.\n\n결측값 패턴 분석을 위한 도구\n결측값의 분포와 패턴을 보다 효과적으로 분석하기 위해서는 통계 프로그램 및 시각화 도구를 활용하는 것이 유용하다. 이를 통해 결측값이 무작위로 발생한 것인지, 특정 패턴을 가지고 있는지 확인할 수 있으며, 이후 결측값을 보완하는 전략을 수립하는 데 도움을 줄 수 있다.\nR에서는 결측값의 분석에 유용한 다음과 같은 패키지들이 있다.\n\nDescTools 패키지\n\n다양한 기초 통계 분석의 방법을 제공하는 패키지\nPlotMiss 함수를 사용하여 결측값의 위치와 비율을 시각화할 수 있다.\n\nggmice 패키지 +plot_pattern 함수를 사용하여 결측값의 패턴을 시각화할 수 있다.\nmice 패키지\n\nmice 함수를 사용하여 결측값을 대체한 자료를 생성\n\nnaniar 패키지\n\n체계적이며 간결한 방법으로 결측값에 대한 요약, 시각화, 대체를 할 수 있는 다양한 기능을 제공한다.\n\n\nPython에서는 pandas 라이브러리를 이용하여 결측값의 빈도와 비율을 쉽게 확인할 수 있으며, missingno 라이브러리를 활용하면 결측값의 분포를 시각적으로 분석할 수 있다.\n\n\n예제 자료\n서울 열린 데이터 광장에서 제공하는 2019년 서울특별시 부동산 실거래가 정보를 가진 자료를 어번 예제에 사용하려고 한다. 2019년 거래하여 신고한 주택들의 위치와 정보 그리고 실거래 가격이 포함된 총 67238건의 실제 거래자료는 거래된 주택에 대한 실거래가 등 다양한 정보를 포함하고 있다.\n본 예제에서는 실습을 위하여 원래 자료의 일부를 분석할 것이며 교육을 위하여 결측값의 유형이 서로 다른 합성 자료(synthetic data)도 사용할 것이다. 다음은 이 절에서 사용할 예제 자료의 특성은 다음과 같다.\n\n예제 자료에서는 이미 지어진 아파트의 거래만 선택(분양 아파트 제외)\n아파트의 거래에서 1000건의 자료만 임의로 선택\n거래가격의 단위는 백만원으로 변경\n결측값이 없는 원자료와 결측값의 유형이 다른 3개의 합성 자료로 구성\n예제에서 사용할 자료는 다음과 같은 6개의 컬럼을 가지고 있다.\n\n실거래가아이디\n건축년도 (주택이 지어진 년도)\n자치구명\n건물면적 (제곱미터)\n층정보\n물건금액 (거래 가격, 백만원)\n\n\n이제 예제 자료를 포함한 R 데이터를 불러오자.\n\n\n코드\nload(here::here(\"data\", \"missing_data.RData\"))\nls()\n\n\n[1] \"df_full\"   \"df_miss_1\" \"df_miss_2\" \"df_miss_3\"\n\n\n결측값이 없는 예제 자료 df_full 의 일부는 아래와 같다. 결측값이 존재하는 다른 3개의 자료(df_miss_1, df_miss_2, df_miss_3)는 결측값이 없는 예제 자료 df_full 에서 결측값이 특정한 패턴을 가지고 발생하도록 만든 합성자료이다.\n\n\n코드\nknitr::kable(df_full %&gt;% head(10))\n\n\n\n\n표 2.1: 결측값이 없는 예제 자료\n\n\n\n\n\n\n실거래가아이디\n자치구명\n건축년도\n건물면적\n층정보\n물건금액\n\n\n\n\n1\n송파구\n2007\n59.88\n12\n1330\n\n\n2\n용산구\n2004\n126.19\n21\n1560\n\n\n3\n성동구\n2000\n59.96\n12\n750\n\n\n4\n서대문구\n2004\n84.88\n5\n400\n\n\n5\n성동구\n2016\n84.64\n6\n1300\n\n\n6\n중랑구\n1997\n84.08\n16\n450\n\n\n7\n광진구\n2001\n84.91\n12\n1025\n\n\n8\n송파구\n2006\n135.82\n30\n2332\n\n\n9\n성북구\n2008\n84.83\n4\n620\n\n\n10\n성북구\n1994\n84.90\n9\n505\n\n\n\n\n\n\n\n\n결측값이 있는 자료 df_miss_1 의 일부는 다음과 같으며 결측값은 NA 로 표시된다.\n\n\n코드\nknitr::kable(df_miss_1 %&gt;% head(10))\n\n\n\n\n표 2.2: 결측값이 있는 예제 자료\n\n\n\n\n\n\n실거래가아이디\n자치구명\n건축년도\n건물면적\n층정보\n물건금액\n\n\n\n\n1\n송파구\n2007\n59.88\nNA\nNA\n\n\n2\n용산구\n2004\n126.19\n21\n1560\n\n\n3\n성동구\n2000\nNA\n12\n750\n\n\n4\n서대문구\n2004\n84.88\n5\n400\n\n\n5\n성동구\n2016\n84.64\n6\n1300\n\n\n6\n중랑구\n1997\n84.08\n16\n450\n\n\n7\n광진구\n2001\nNA\n12\n1025\n\n\n8\n송파구\nNA\n135.82\n30\n2332\n\n\n9\n성북구\n2008\n84.83\n4\n620\n\n\n10\n성북구\n1994\n84.90\n9\n505\n\n\n\n\n\n\n\n\n\n\n결측값의 검토\n먼저 결측값이 있는 자료 df_miss_1 에서 결측값의 위치를 시각적으로 살펴보기 위하여 다음과 같이 PlotMiss 함수를 사용해 보자.\n\n\n코드\nPlotMiss(df_miss_1, main=\"결측값의 위치와 비율\")\n\n\n\n\n\n그림 2.1: 결측값의 위치와 비율 - df_miss_1\n\n\n\n\n\n\n\n\n그림 2.1 을 보면 4개의 변수에 결측값이 존재하는 자료이며 그림 오른쪽에 각 변수에 존재하는 결측값의 개수외 비율이 나타난다.\n이제 plot_pattern 함수를 이용하여 결측가 발생하는 패턴에 대해서 살펴보자\n\n\n코드\nplot_pattern(df_miss_1, square= FALSE) \n\n\n\n\n\n그림 2.2: 무작위로 발생한 결측값\n\n\n\n\n\n\n\n\n그림 2.2 의 각 행은 결측값이 나타난 유형을 알려주며, 오른쪽의 숫자는 주어진 패턴으로 나타난 결측된 컬럼의 개수이다. 왼쪽은 결측값이 나타난 유형에 속하는 자료의 개수(pattern frequency)이다. 아래 쪽에 나타난 숫자는 각 컬럼에 나타나는 결측값의 개수이다.\n그림 2.2 에 나타나 결측값의 발생 형태를 보면 특별한 경향이 없이 4개의 변수에서 무작위로 발생한 것으로 판단된다.\n다음으로 결측값이 있는 자료 df_miss_2 에서 결측값의 위치를 시각적으로 살펴보자.\n\n\n코드\nPlotMiss(df_miss_2, main=\"결측값의 위치와 비율\")\n\n\n\n\n\n그림 2.3: 결측값의 위치와 비율 - df_miss_2\n\n\n\n\n\n\n\n\nplot_pattern 함수를 이용하여 결측가 발생하는 패턴에 대해서 살펴보자\n\n\n코드\nplot_pattern(df_miss_2, square= FALSE) \n\n\n\n\n\n그림 2.4: 결측값의 계층적인 패턴\n\n\n\n\n\n\n\n\n그림 2.4 에 나타나 결측값의 발생 형태를 보면 특별한 경향이 있는 것으로 보인다.\ndf_miss_2 자료에서는 세 개의 변수에서 결측값이 존재하며, 이 결측값들은 단순한 무작위적 발생이 아닌 계층적인 패턴을 따르는 것으로 나타났다. 층정보컬럼는건물면적` 값이 결측된 경우, 반드시 결측되는 구조를 보였다. 즉, 건물면적에 대한 정보가 없는 경우 층수 역시 제공되지 않는 패턴이 관찰된 것이다. 이러한 상관관계는 데이터의 누락이 단순한 실수나 오류에서 비롯된 것이 아니라, 특정 컬럼 간 논리적인 관계 속에서 발생하고 있음을 보여준다.\n또한, 물건금액 컬럼의 경우, 층정보가 결측되면 자동으로 결측값이 되는 구조를 보였다. 이는 물건금액이 층정보에 의존적이라는 점을 시사하며, 데이터의 구조적 특성을 이해하는 데 중요한 단서가 된다.\n다음은 naniar 패키지에서 제공하는 결측값의 위치를 제공하는 함수 geom_miss_point() 를 사용하여 건축년도 와 건물면적 의 관게를 나타내는 산점도(scatter plot)에 건물면적이 없는 결측값을 나타낸 그림이다.\n\n\n코드\nggplot(df_miss_2, \n       aes(x = `건축년도`, \n           y = `건물면적`)) + \n  geom_miss_point()\n\n\n\n\n\n그림 2.5: 두 변수와의 관계와 결측값 패턴\n\n\n\n\n\n\n\n\n건물면적 컬럼의 경우, 건축연도가 최근일수록 결측값이 발생할 가능성이 높은 것으로 확인된다. 이는 건축연도가 최신일수록 특정 정보가 기록되지 않는 경향이 있음을 시사한다.\n마지막으로 결측값이 있는 자료 df_miss_3 에서 결측값의 위치를 시각적으로 살펴보자.\n\n\n코드\nPlotMiss(df_miss_2, main=\"결측값의 위치와 비율\")\n\n\n\n\n\n그림 2.6: 결측값의 위치와 비율 - df_miss_3\n\n\n\n\n\n\n\n\nplot_pattern 함수를 이용하여 자료 df_miss_3 에서 결측가 발생하는 패턴에 대해서 살펴보자\n\n\n코드\nplot_pattern(df_miss_3, square= FALSE) \n\n\n\n\n\n그림 2.7: 중요한 컬럼에서 결측값의 발생\n\n\n\n\n\n\n\n\n그림 2.7 에 나타나 결측값의 발생 형태를 보면 자료레서 가장 관심있는 컬럼인 물건금액 에서만 10% 결측이 발생하였다. 물건금액 이 중요한 변수이기 떄문에 결측값이 발생하는 패컨이 무작위인지 아니면 특별한 패턴을 가지고 있는지가 중요하다.\n이제 건물면적 에 따라서 변하는 물건금액 에 대한 관계를 나타내는 산점도(scatter plot)에 건물면적이 없는 결측값을 나타낸 그림이다.\n\n\n코드\nggplot(df_miss_3, \n       aes(x = `건물면적`, \n           y = `물건금액`)) + \n  geom_miss_point()\n\n\n\n\n\n그림 2.8: 두 변수와의 관계와 결측값 패턴\n\n\n\n\n\n\n\n\n그림 2.8 를 보면 자료에 건물면적이 커질수록 물건금액 이 결측값이 나타날 경향이 큰 것으로 보인다. 특히, 건물면적이 매우 큰 자료에서는 물건금액 이 결측인 경우가 매우 많다. 이렇게 가장 관심있는 변수에서 나타나는 결측값의 패턴이 무작위가 아니라 자신의 값에 영향을 받는 경우, 결측값을 가진 단위를 제거한 자료를 분석한 결과는 실제 결과와 매우 다를 수 있다.\n결측값의 발생 패턴을 무시한 채 단순히 보정하거나 제거할 경우, 데이터의 본질적인 특성을 왜곡할 위험이 있다. 따라서 결측값을 처리하기 전, 그 발생 구조를 면밀히 분석하고 적절한 보완 전략을 수립하는 것이 무엇보다 중요하다.\n데이터 분석에서 결측값은 단순한 누락 이상의 의미를 지닌다. 특히, 결측값이 일정한 패턴을 보이며 발생할 경우, 이를 무작정 보완하거나 제거하는 것이 아니라 그 구조를 이해하는 것이 중요하다.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>결측자료의  발생원인과 유형</span>"
    ]
  },
  {
    "objectID": "docs/chapter-02.html",
    "href": "docs/chapter-02.html",
    "title": "3  데이터 요약표 작성의 기초",
    "section": "",
    "text": "서론\n데이터 분석 과정에서 가장 중요한 단계 중 하나는 자료를 요약하고, 통계적으로 의미 있는 형태로 정리하는 것이다. 원시 데이터(raw data)는 보통 복잡하고 정리가 필요한 경우가 많으며, 이를 효율적으로 정리하지 않으면 분석의 방향을 설정하는 것이 어려워질 수 있다. 이러한 과정에서 R의 대표적인 데이터 처리 패키지인 dplyr과 tidyr이 강력한 도구로 활용된다.\ndplyr은 데이터 프레임을 다룰 때 가장 널리 사용되는 패키지로, 직관적인 문법과 강력한 기능을 제공한다. 특히, 데이터를 요약하고 통계 테이블을 생성하는 과정에서 코드의 가독성(tidy evaluation)을 높이고 실행 속도를 최적화할 수 있다는 점에서 유용하다. 특히, 연속적인 데이터 변환에서 %&gt;%(pipe 연산자)를 활용하면 여러 연산을 논리적으로 연결하여 가독성을 높일 수 있다.\n통계 테이블을 만들 때 데이터는 종종 정리되지 않은 형태(untidy data)로 존재하며, 분석을 위해 올바른 형태로 변환해야 하는 경우가 많다. tidyr 패키지는 이러한 데이터 정리 과정에서 필수적인 역할을 한다. tidyr을 사용하면 넓은 형식(Wide format)과 긴 형식(Long format)의 자료로 상호 변환이 가능하다. 또한 결측값 및 불완전한 데이터 정리하는데 유용하게 사용된다.\n대부분의 데이터 정리는 요약(summarization)과 변환(transformation)이 함께 이루어진다. dplyr과 tidyr은 각각의 역할을 수행하며, 함께 사용하면 더욱 강력한 데이터 처리 능력을 발휘할 수 있다.\n이처럼 dplyr은 데이터를 요약하고 통계를 생성하는 역할을 하며, tidyr은 정리되지 않은 데이터를 보다 분석하기 쉬운 형태로 변환하는 역할을 한다. 따라서, 통계 테이블을 만들거나 데이터를 정리하는 모든 과정에서 dplyr과 tidyr은 필수적인 도구**이며, 이를 활용하면 데이터 분석의 효율성과 신뢰성을 크게 향상시킬 수 있다.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>데이터 요약표 작성의 기초</span>"
    ]
  },
  {
    "objectID": "docs/chapter-02.html#데이터의-요약",
    "href": "docs/chapter-02.html#데이터의-요약",
    "title": "3  데이터 요약표 작성의 기초",
    "section": "3.1 데이터의 요약",
    "text": "3.1 데이터의 요약\n이 절에서는 요약통계량을 도출하거나 보고서로 올리기위해 자료를 요약하여 정리하는 방법을 보이고자 한다.\n먼저, 함수들을 설명하기 위한 간단한 데이터프레임을 만들어본다.\n\n\n코드\ndf &lt;- data.frame(\n  이름 = c(\"홍길동\", \"김영희\", \"박찬호\", \"이소라\", \"최민식\"),\n  도시 = c(\"서울\", \"부산\", \"서울\", \"인천\", \"부산\"),\n  나이 = c(25, 30, 35, 40, 28),\n  점수 = c(80, 90, 75, 82, 95)\n)\n\nknitr::kable(df)\n\n\n\n\n표 3.2: 예제 데이터프레임\n\n\n\n\n\n\n이름\n도시\n나이\n점수\n\n\n\n\n홍길동\n서울\n25\n80\n\n\n김영희\n부산\n30\n90\n\n\n박찬호\n서울\n35\n75\n\n\n이소라\n인천\n40\n82\n\n\n최민식\n부산\n28\n95\n\n\n\n\n\n\n\n\n\n그릅의 지정: group_by()\n\n특정 열(또는 여러 열)을 기준으로 행들을 묶어 그룹한다.\n그룹화 후에는 요약summarize(), 변환mutate(), 혹은 재구조화reframe() 등의 작업을 그룹 단위로 수행할 수 있다.\n\n\n\n코드\ndf_grouped &lt;- df %&gt;%\n  group_by(도시)\n\ndf_grouped\n\n\n# A tibble: 5 × 4\n# Groups:   도시 [3]\n  이름   도시   나이  점수\n  &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 홍길동 서울     25    80\n2 김영희 부산     30    90\n3 박찬호 서울     35    75\n4 이소라 인천     40    82\n5 최민식 부산     28    95\n\n\n\n결과물을 보면 눈에 보이는 데이터는 바뀌지 않지만, 내부적으로 도시를 기준으로 데이터가 ’그룹화’된 상태가 된다. 이후에 summarize(), reframe() 등을 하면 “도시별”로 계산한다.\n\n\n\n자료의 요약: summarize() 또는 summarise()\n\n평균, 합계, 개수 등의 통계를 구할 때 자주 사용한다. 한 번에 여러 요약 통계를 낼 수도 있다.\n도시별로 평균 나이와 평균 점수를 구해보자.\n\nmean(나이): 각 도시 그룹 내 나이의 평균\nmean(점수): 각 도시 그룹 내 점수의 평균\nn(): 그룹 내 행(row)의 개수(인원수)를 세어줌\n\n\n\n\n코드\ndf %&gt;%\n  group_by(도시) %&gt;%\n  summarize(\n    `평균나이` = mean(`나이`),\n    `평균점수` = mean(`점수`),\n    `인원수`   = n()\n  )\n\n\n# A tibble: 3 × 4\n  도시  평균나이 평균점수 인원수\n  &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;  &lt;int&gt;\n1 부산        29     92.5      2\n2 서울        30     77.5      2\n3 인천        40     82        1\n\n\n\n\n제이터프레임의 컬럼명\ndplyr과 tidyr 제공되는 함수들은 간결한 연산(tidy evaluation)의 방식이 적용되어 데이터프레임의 컬럼 이름을 나타낼 때 영문과 한글 상관없이 따옴표를 붙이지 않고 없이 사용할 수 있다. 하지만 컬럼명을 한글로 사용하는 경우 간결한 연산이 적용되지 않는 다른 패키지의 함수와 같이 사용하는 경우 문제가 발생할 수 있다.\n따라서 한글 컬럼 이름은 언제나 역따옴표 `` 로 묶어주는 것이 안전하다.\n\n\n컬럼의 위치 이동: relocate()\n\n열(column)의 순서를 재배치한다.\n\n.before: 어떤 열의 앞에 지정한 열들을 옮길지 설정 (또는 .after도 있음)\n.before = 이름: 기존의 이름 열 앞에 도시 열을 위치시키라는 의미\n\n데이터를 보기 편하게 만들거나, 특정 열을 맨 앞으로 가져올 때 유용하다.\n예제 자료에서 도시 열을 맨 앞으로 가져오기\n\n\n\n코드\ndf_relocated &lt;- df %&gt;%\n  relocate(도시, .before = 이름)\n\ndf_relocated\n\n\n  도시   이름 나이 점수\n1 서울 홍길동   25   80\n2 부산 김영희   30   90\n3 서울 박찬호   35   75\n4 인천 이소라   40   82\n5 부산 최민식   28   95\n\n\n\n\n컬럼의 선택: select()\n\n원하는 열만 선택하거나, 열의 순서를 지정하는 데 사용한다.\n데이터에서 특정 열만 추출하거나, 불필요한 열을 제거하고 싶을 때 사용한다.\n다음 예시는 이름과 점수 열만 선택\n\n\n\n코드\ndf_selected &lt;- df %&gt;%\n  select(이름, 점수)\n\ndf_selected\n\n\n    이름 점수\n1 홍길동   80\n2 김영희   90\n3 박찬호   75\n4 이소라   82\n5 최민식   95\n\n\n\n\n재구조화: reframe()\n\nsummarize()와 비슷하게 그룹화된 데이터를 재구조화하되, 결과를 그룹별 여러 행으로 반환할 수도 있다.\ndplyr 1.1.0부터 추가된 기능으로, 기존 summarize()가 그룹당 “요약된 한 행”을 반환했던 것과 달리, reframe()은 그룹별로 여러 행을 만들어낼 수 있다.\n다음 예시는 도시별로 데이터를 모은 뒤, 그 안에서 ’이름’과 ’점수’만 추려서 재구조화\n\n\n\n코드\ndf_reframed &lt;- df %&gt;%\n  group_by(도시) %&gt;%\n  reframe(\n    이름,\n    점수,\n    평균도시점수 = mean(점수)\n  )\n\ndf_reframed\n\n\n# A tibble: 5 × 4\n  도시  이름    점수 평균도시점수\n  &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;        &lt;dbl&gt;\n1 부산  김영희    90         92.5\n2 부산  최민식    95         92.5\n3 서울  홍길동    80         77.5\n4 서울  박찬호    75         77.5\n5 인천  이소라    82         82  \n\n\n\n도시별로 그룹화한 뒤 각 그룹 내부에서 모든 이름과 점수를 그대로 나열하면서, 같은 그룹 내 평균 점수(평균도시점수)를 함께 표시한다.\n결과는 그룹당 여러 행(그룹에 속한 사람 수만큼)이 나올 수 있으며, 요약 통계는 반복되어 표시한다.\n\n\n\n컬럼명 변경 rename() 또는 rename_with\n\n특정 규칙에 따라 여러 열의 이름을 한꺼번에 변경할 때 사용한다.\n예를 들어, 모든 열 이름에 접두사(prefix)를 붙이거나, 대소문자 변환 등을 할 수 있다.\n\n\n\n코드\ndf_renamed1 &lt;- df %&gt;%\n  rename(city = 도시, name = 이름)\n\ndf_renamed1\n\n\n    name city 나이 점수\n1 홍길동 서울   25   80\n2 김영희 부산   30   90\n3 박찬호 서울   35   75\n4 이소라 인천   40   82\n5 최민식 부산   28   95\n\n\n\n다음 예시는 모든 열 이름에 “new_”라는 접두사를 붙인다.\n\n.fn: 열 이름을 어떻게 변환할지 정의한 함수\n.cols: 변환할 열의 범위 지정(예: 특정 열, everything())\n\n\n\n\n코드\ndf_renamed2 &lt;- df %&gt;%\n  rename_with(.fn = ~ paste0(\"new_\", .), .cols = everything())\n\ndf_renamed2\n\n\n  new_이름 new_도시 new_나이 new_점수\n1   홍길동     서울       25       80\n2   김영희     부산       30       90\n3   박찬호     서울       35       75\n4   이소라     인천       40       82\n5   최민식     부산       28       95\n\n\n\n\n정열: arrange()\n\n원하는 열을 기준으로 행을 정렬한다. 오름차순/내림차순 모두 가능.\n내림차순 정렬 시에는 desc()를 사용.\n다음 예시는 점수 순서대로 오름차순 정렬\n\n\n\n코드\ndf_arranged &lt;- df %&gt;%\n  arrange(점수)\n\ndf_arranged\n\n\n    이름 도시 나이 점수\n1 박찬호 서울   35   75\n2 홍길동 서울   25   80\n3 이소라 인천   40   82\n4 김영희 부산   30   90\n5 최민식 부산   28   95\n\n\n\narrange(점수): 점수가 낮은 순서에서 높은 순서로 정렬\n만약 높은 순서부터 정렬을 원한다면 arrange(desc(점수))\n\n\n\n컬럼 묶기 across()\n\n여러 열에 대해 동일한 함수를 일괄 적용할 때 사용한다.\nmutate(), summarize() 등에서, 선택한 여러 열에 대해 한꺼번에 연산을 적용할 수 있다.\n다음 예시는 나이와 점수를 각각 2배로 만들고, 새로운 열(나이2배, 점수2배)을 생성\n\n\n\n코드\ndf_across &lt;- df %&gt;%\n  mutate(\n    across(\n      .cols = c(나이, 점수),       # 어떤 열에 적용할지\n      .fns  = ~ . * 2,            # 어떤 함수를 적용할지\n      .names = \"{.col}2배\"        # 새로운 열 이름 형식\n    )\n  )\n\ndf_across\n\n\n    이름 도시 나이 점수 나이2배 점수2배\n1 홍길동 서울   25   80      50     160\n2 김영희 부산   30   90      60     180\n3 박찬호 서울   35   75      70     150\n4 이소라 인천   40   82      80     164\n5 최민식 부산   28   95      56     190\n\n\n\n.cols: 변환 적용 대상 열 지정\n.fns: 적용할 함수\n.names: 새 열 이름 패턴 정의 (\"{.col}\", \"{.col}_새이름\" 등)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>데이터 요약표 작성의 기초</span>"
    ]
  },
  {
    "objectID": "docs/chapter-02.html#데이터의-변환",
    "href": "docs/chapter-02.html#데이터의-변환",
    "title": "3  데이터 요약표 작성의 기초",
    "section": "3.2 데이터의 변환",
    "text": "3.2 데이터의 변환\n데이터프레임의 형태를 바꾸는 중요한 함수 2개를 소개한다.\n\n긴 형식: pivot_longer()\n\n가로 방향으로 나열된 데이터를 세로 방향(긴 형태, Long format)로 변환한다.\n\n\n\n\n긴 형식으로 변환(그림출처: tidyr 홈페이지)\n\n\n\n보통 측정 항목(예: 나이, 점수)이 열로 되어 있을 때, 이를 “변수 이름”과 “값”의 두 열로 합쳐서 “길게”(long) 만들 때 쓰인다.\n다음 예시는 나이와 점수 열을 세로 방향으로 길게 변환\n\n\n\n코드\ndf_long &lt;- df %&gt;%\n  pivot_longer(\n    cols      = c(나이, 점수),\n    names_to  = \"측정항목\",\n    values_to = \"값\"\n  )\n\ndf_long\n\n\n# A tibble: 10 × 4\n   이름   도시  측정항목    값\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;    &lt;dbl&gt;\n 1 홍길동 서울  나이        25\n 2 홍길동 서울  점수        80\n 3 김영희 부산  나이        30\n 4 김영희 부산  점수        90\n 5 박찬호 서울  나이        35\n 6 박찬호 서울  점수        75\n 7 이소라 인천  나이        40\n 8 이소라 인천  점수        82\n 9 최민식 부산  나이        28\n10 최민식 부산  점수        95\n\n\n\ncols: 세로로 변환할(길게 만들) 대상 열을 지정\nnames_to: 기존 열 이름이 어떤 새 열 이름으로 저장될지 지정\nvalues_to: 기존 열 값이 어떤 새 열 이름으로 저장될지 지정\n\n\n\n넓은 형식: pivot_wider()\n\n세로 방향(긴 형태)로 나열된 데이터를 가로 방향(넓은 형태)으로 변환한다.\n\n\n\n\n넓은 형식으로 변환(그림출처: tidyr 홈페이지)\n\n\n\n일반적으로 pivot_longer()로 만들었던 긴 데이터 프레임을 다시 열별로 펼칠 때 사용한다.\n다음 예시는 pivot_longer() 결과물(df_long)을 다시 넓은 형식으로 변환\n\n\n\n코드\ndf_wide &lt;- df_long %&gt;%\n  pivot_wider(\n    names_from  = \"측정항목\",\n    values_from = \"값\"\n  )\n\ndf_wide\n\n\n# A tibble: 5 × 4\n  이름   도시   나이  점수\n  &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 홍길동 서울     25    80\n2 김영희 부산     30    90\n3 박찬호 서울     35    75\n4 이소라 인천     40    82\n5 최민식 부산     28    95\n\n\n\nnames_from: 어떤 열의 값을 “열 이름”으로 펼칠지 지정\nvalues_from: 어떤 열의 값을 “열 값”으로 사용할지 지정\n다시 이름, 도시를 그대로 두면서, 나이와 점수가 각각 열로 복원된 형태가 된다.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>데이터 요약표 작성의 기초</span>"
    ]
  },
  {
    "objectID": "docs/chapter-02.html#실습-데이터요약표-만들기",
    "href": "docs/chapter-02.html#실습-데이터요약표-만들기",
    "title": "3  데이터 요약표 작성의 기초",
    "section": "3.3 실습: 데이터요약표 만들기",
    "text": "3.3 실습: 데이터요약표 만들기\n이제 실제 데이터를 이용하여 분할표와 요약통계표를 구해보자.\n\n\n코드\nload(here::here(\"data\", \"physical100_data.RData\"))\nls()\n\n\n [1] \"df\"           \"df_across\"    \"df_arranged\"  \"df_grouped\"   \"df_long\"     \n [6] \"df_reframed\"  \"df_relocated\" \"df_renamed1\"  \"df_renamed2\"  \"df_selected\" \n[11] \"df_wide\"      \"df1_youth\"   \n\n\n\n소개\n\n2018-2023년 국민체력100사업에서 측정한 초등학교 체력측정 자료\n실습을 위하여 1000명 임의로 추출한 자료\n이 실습에서 통계표를 작성하는 원천 자료(raw data; source data)로 이용\n\n\n\n코드\nhead(df1_youth, 10)\n\n\n       ID CENTER_NM TEST_AGE   TEST_YMD TEST_YEAR TEST_SEX ITEM_F001 ITEM_F002\n    &lt;int&gt;    &lt;char&gt;    &lt;int&gt;     &lt;Date&gt;     &lt;int&gt;   &lt;char&gt;     &lt;num&gt;     &lt;num&gt;\n 1:     1      삼척       13 2018-10-12      2018     남성     172.5      62.7\n 2:     2      동작       18 2018-05-17      2018     남성     180.8      79.2\n 3:     3      마포       16 2018-05-02      2018     남성     169.0      63.0\n 4:     4      강릉       17 2019-04-01      2019     여성     151.9      52.5\n 5:     5      남원       14 2020-09-22      2020     여성     150.1      61.2\n 6:     6      안동       17 2018-10-22      2018     남성     173.6      53.5\n 7:     7      원주       15 2023-05-08      2023     여성     163.8      66.2\n 8:     8      태백       14 2022-05-17      2022     남성     162.9      53.4\n 9:     9      성남       16 2018-09-19      2018     남성     163.1      63.9\n10:    10      서초       13 2019-05-21      2019     남성     169.3      66.7\n    ITEM_F009 ITEM_F012 ITEM_F018 ITEM_F020 ITEM_F022 ITEM_F028\n        &lt;num&gt;     &lt;num&gt;     &lt;num&gt;     &lt;num&gt;     &lt;num&gt;     &lt;num&gt;\n 1:        NA      -8.2      21.1        25        NA      42.2\n 2:        NA       8.5      24.2        64       245      78.1\n 3:        27      -7.0      22.1        36       165      52.5\n 4:        NA      10.9      22.8        17        NA      36.7\n 5:        NA      27.5      27.2        18       137      37.2\n 6:        27       9.0      17.8        29       220      71.7\n 7:        NA      25.2      24.7        15       133      45.2\n 8:        NA       9.6      20.1        31       210      45.7\n 9:        NA      17.6      24.0        50        NA      58.3\n10:        NA       1.2      23.3        20       150      42.1\n\n\n\n\n요약통계표\n\ndf1_youth에서 성별과 각 년도별로 그룹화 해서 도수,평균 등을 계산.\n\n코드에 대해 설명하면,\n\n원천자료 df1_youth 를 지정하고\nTEST_SEX, TEST_YEAR, ITEM_F001 컬럼을 선택하고\nTEST_SEX, TEST_YEAR 컬럼으로 그룹화한 후\n신장(ITEM_F001) 에 대한 그룹별 돗수, 평균, 표준편차를 계산\n\n\n\n코드\nbasic_stat_table &lt;- df1_youth %&gt;%\n  select(TEST_SEX, TEST_YEAR, ITEM_F001) %&gt;%\n  group_by(TEST_SEX, TEST_YEAR) %&gt;%\n  summarize(n = n(), MEAN =mean(ITEM_F001, na.rm= TRUE ),\n            SD =sd(ITEM_F001, na.rm= TRUE ),\n            .groups = \"drop\"  # 그룹을 모두 해제\n            )\nbasic_stat_table\n\n\n# A tibble: 14 × 5\n   TEST_SEX TEST_YEAR     n  MEAN     SD\n   &lt;chr&gt;        &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 남성          2017    85  188. 173.  \n 2 남성          2018   131  171.   6.38\n 3 남성          2019   140  171.   7.49\n 4 남성          2020    20  172.   5.26\n 5 남성          2021    29  173.   6.61\n 6 남성          2022    66  174.   6.28\n 7 남성          2023    89  171.   7.79\n 8 여성          2017    83  160.   6.27\n 9 여성          2018    90  160.   5.38\n10 여성          2019    96  160.   5.33\n11 여성          2020    13  160.   4.28\n12 여성          2021    22  159.   4.11\n13 여성          2022    52  161.   5.59\n14 여성          2023    84  161.   6.05\n\n\n\n\n분할표\n남여별로 각 년도에 돗수를 분할표로 구해본다.\n\n원천자료 df1_youth 를 지정하고\nTEST_SEX, TEST_YEAR 컬럼을 선택하고\nTEST_SEX, TEST_YEAR 컬럼으로 그룹화한 후\n각 그룹의 조합의 돗수를 n 으로 계산한다.\n측정연도 TEST_YEAR 의 숫자 앞에 Y 를 붙여서 새로운 열이름을 만들고, 성별과 연도에 해당하는 돗수로 교차표를 만든다.\n\n\n\n코드\ncross_stat_table &lt;- df1_youth %&gt;%\n  select(TEST_SEX, TEST_YEAR) %&gt;%\n  group_by(TEST_SEX, TEST_YEAR) %&gt;%\n  summarize(n = n()) %&gt;%\n  pivot_wider(names_from = TEST_YEAR,\n              values_from = n, names_prefix = \"Y\" )\n\n\n`summarise()` has grouped output by 'TEST_SEX'. You can override using the\n`.groups` argument.\n\n\n코드\ncross_stat_table\n\n\n# A tibble: 2 × 8\n# Groups:   TEST_SEX [2]\n  TEST_SEX Y2017 Y2018 Y2019 Y2020 Y2021 Y2022 Y2023\n  &lt;chr&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 남성        85   131   140    20    29    66    89\n2 여성        83    90    96    13    22    52    84\n\n\n\n\n통계표 만들기\n통계표를 만드는 방법을 여러가지 보일 것이다.\n우선 통계량을 구하는 함수를 코드에 일일히 입력하기 번거로우니 여러 개의 지정된 함수와 이름을 list로 묶어서 my_summ_func에 저장하는 방법을 사용한다.\n각 측정항목에 적용할 통계 함수와 출력값의 이름을 지정한다.\n\n\n코드\nmy_summ_func &lt;- list(\n  개수 = ~sum(!is.na(.x)),\n  결측개수 = ~sum(is.na(.x)),\n  평균 = ~mean(.x, na.rm = TRUE),\n  표준편차 = ~sd(.x, na.rm = TRUE),\n  최소값 = ~min(.x, na.rm = TRUE),\n  백분위25 = ~quantile(.x, probs = 0.25, na.rm = TRUE),\n  중앙값 = ~median(.x, na.rm = TRUE),\n  백분위75 = ~quantile(.x, probs = 0.75, na.rm = TRUE),\n  최대값 = ~max(.x, na.rm = TRUE)\n)\n\n\n\n~sum,~mean, 등등: 함수를 쓸때 간단하게 작성하는 방법\n.x: 자리표시자로써 열 또는 원소를 지칭하는 의미\nna.rm: 결측치(NA)를 제거하고 계산할지 여부를 물어보는 것\n\n\n1단계 통계표\n\n간단한 통계표부터 보여본다.\n\n원천자료 df1_youth를 지정하고\nTEST_SEX, TEST_YEAR 컬럼을 선택하고\nmy_summ_func 에서 정의한 함수를 열이름이 ITEM을 포함한 모든열에 적용한다.\n\n\n\n코드\naa &lt;- df1_youth %&gt;% \n  group_by(TEST_SEX, TEST_YEAR) %&gt;%\n  summarise(across(contains(\"ITEM\"), my_summ_func,\n                   .names = \"{.col}-{.fn}\"))\n\n\n`summarise()` has grouped output by 'TEST_SEX'. You can override using the\n`.groups` argument.\n\n\n코드\naa\n\n\n# A tibble: 14 × 74\n# Groups:   TEST_SEX [2]\n   TEST_SEX TEST_YEAR `ITEM_F001-개수` `ITEM_F001-결측개수` `ITEM_F001-평균`\n   &lt;chr&gt;        &lt;int&gt;            &lt;int&gt;                &lt;int&gt;            &lt;dbl&gt;\n 1 남성          2017               85                    0             188.\n 2 남성          2018              131                    0             171.\n 3 남성          2019              140                    0             171.\n 4 남성          2020               20                    0             172.\n 5 남성          2021               29                    0             173.\n 6 남성          2022               66                    0             174.\n 7 남성          2023               89                    0             171.\n 8 여성          2017               83                    0             160.\n 9 여성          2018               90                    0             160.\n10 여성          2019               96                    0             160.\n11 여성          2020               13                    0             160.\n12 여성          2021               22                    0             159.\n13 여성          2022               52                    0             161.\n14 여성          2023               84                    0             161.\n# ℹ 69 more variables: `ITEM_F001-표준편차` &lt;dbl&gt;, `ITEM_F001-최소값` &lt;dbl&gt;,\n#   `ITEM_F001-백분위25` &lt;dbl&gt;, `ITEM_F001-중앙값` &lt;dbl&gt;,\n#   `ITEM_F001-백분위75` &lt;dbl&gt;, `ITEM_F001-최대값` &lt;dbl&gt;,\n#   `ITEM_F002-개수` &lt;int&gt;, `ITEM_F002-결측개수` &lt;int&gt;, `ITEM_F002-평균` &lt;dbl&gt;,\n#   `ITEM_F002-표준편차` &lt;dbl&gt;, `ITEM_F002-최소값` &lt;dbl&gt;,\n#   `ITEM_F002-백분위25` &lt;dbl&gt;, `ITEM_F002-중앙값` &lt;dbl&gt;,\n#   `ITEM_F002-백분위75` &lt;dbl&gt;, `ITEM_F002-최대값` &lt;dbl&gt;, …\n\n\n\n2단계 통계표\n\n1단계 통계표에서 pivot_longer을 사용해 추가적으로 진행을 해본다.\n\n항목이름과 통계이름으로 구성된 얿은 열을 가진 자료를 다시 긴 행을 가진 자료로 변환\n변환시 열이름을 두 열로 나누어 저장(항목이름 item과 통계량 stat)\n항목이름 item열을 앞으로 배치\n\n\n\n코드\nbb &lt;- aa %&gt;% pivot_longer(!c(TEST_SEX, TEST_YEAR), names_to = c(\"item\", \"stat\"), names_sep=\"-\" , values_to = \"value\")\nbb\n\n\n# A tibble: 1,008 × 5\n# Groups:   TEST_SEX [2]\n   TEST_SEX TEST_YEAR item      stat     value\n   &lt;chr&gt;        &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;dbl&gt;\n 1 남성          2017 ITEM_F001 개수       85 \n 2 남성          2017 ITEM_F001 결측개수    0 \n 3 남성          2017 ITEM_F001 평균      188.\n 4 남성          2017 ITEM_F001 표준편차  173.\n 5 남성          2017 ITEM_F001 최소값    145.\n 6 남성          2017 ITEM_F001 백분위25  165.\n 7 남성          2017 ITEM_F001 중앙값    170 \n 8 남성          2017 ITEM_F001 백분위75  175.\n 9 남성          2017 ITEM_F001 최대값   1761 \n10 남성          2017 ITEM_F002 개수       85 \n# ℹ 998 more rows\n\n\n\n3단계 통계표\n\n2단계 통계표에서 pivot_wider을 진행해 추가적으로 진행을 해본다.\n\n긴 행을 가진 자료를 측정 년도를 열로 바꾸어 긴 열을 가진 자료로 변환\n항목이름과 성별순으로 자료를 정렬\n\n\n\n코드\ncc &lt;- bb %&gt;% dplyr::relocate(item) %&gt;% pivot_wider(names_from = TEST_YEAR, values_from = value)\ncc\n\n\n# A tibble: 144 × 10\n# Groups:   TEST_SEX [2]\n   item      TEST_SEX stat     `2017` `2018` `2019` `2020` `2021` `2022` `2023`\n   &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 ITEM_F001 남성     개수        85  131    140     20     29     66     89   \n 2 ITEM_F001 남성     결측개수     0    0      0      0      0      0      0   \n 3 ITEM_F001 남성     평균       188. 171.   171.   172.   173.   174.   171.  \n 4 ITEM_F001 남성     표준편차   173.   6.38   7.49   5.26   6.61   6.28   7.79\n 5 ITEM_F001 남성     최소값     145. 146.   144.   161.   155    159    143.  \n 6 ITEM_F001 남성     백분위25   165. 167.   166.   169.   170    171.   166.  \n 7 ITEM_F001 남성     중앙값     170  172.   171.   173.   174.   174.   172.  \n 8 ITEM_F001 남성     백분위75   175. 175.   176.   174.   177.   177.   176.  \n 9 ITEM_F001 남성     최대값    1761  184.   189    183.   185.   189    187.  \n10 ITEM_F002 남성     개수        85  131    140     20     29     66     89   \n# ℹ 134 more rows\n\n\n\n\n함수만들기\n실제로 통계표를 만들고 출력하는 데까지 한번에 하는 것이 아닌 여러번의 과정을 거쳐야 한다는 것을 알고 있다.\n그렇기에 여러번 돌릴 때마다 코드를 수정하면서 돌리는 것은 비효율적이므로 함수를 만들어서 필요할 때 마다 간편하게 통계표를 만드는 과정을 보려고 한다.\n우선, summarise에 쓰일 통계량이 많기에 리스트 형태로 미리 지정하는 것이 편하다.\n\n\n코드\nmy_summ_func &lt;- list(\n  `개수` = ~sum(!is.na(.x)),\n  `결측개수` = ~sum(is.na(.x)),\n  `평균` = ~mean(.x, na.rm = TRUE),\n  `표준편차` = ~sd(.x, na.rm = TRUE),\n  `최소값` = ~min(.x, na.rm = TRUE),\n  `백분위25` = ~quantile(.x, probs = 0.25, na.rm = TRUE),\n  `중앙값` = ~median(.x, na.rm = TRUE),\n  `백분위75` = ~quantile(.x, probs = 0.75, na.rm = TRUE),\n  `최대값` = ~max(.x, na.rm = TRUE)\n)\n\nmy_summ_func_2 &lt;- list(\n  `개수` = ~n(),\n  `평균` = ~mean(.x, na.rm = TRUE),\n  `표준편차` = ~sd(.x, na.rm = TRUE)\n)\n\n\n이제 직접 함수를 만들고 이해해보자.\n\n\n코드\nsumm_function_general &lt;- function(df, cols_to_row, cols_to_col, cols_to_summ, stat_fun, stat_to_column = FALSE) {\n  \n  col1 &lt;- syms(cols_to_row)\n  col2 &lt;- syms(cols_to_col)\n  col3 &lt;- syms(cols_to_summ)\n  \n  tab1 &lt;- df %&gt;%     \n    group_by(!!!col1, !!!col2) %&gt;%  \n    summarise(across(all_of(cols_to_summ), stat_fun, \n                     .names = \"{.col}-{.fn}\")) %&gt;%\n    pivot_longer(cols = -c(!!!col1, !!!col2), \n                 names_to = c(\"ITEM\", \"STAT\"),  \n                 names_sep=\"-\" , values_to = \"value\")  %&gt;%   \n    relocate(ITEM) %&gt;% \n    dplyr::arrange(ITEM) %&gt;%\n    dplyr::ungroup() \n  \n  if (stat_to_column) { \n    tab1 &lt;- tab1  %&gt;% pivot_wider(names_from = all_of(c(cols_to_col,\"STAT\")), values_from = value)  \n  }\n  else {\n    tab1 &lt;- tab1 %&gt;% pivot_wider(names_from = all_of(cols_to_col), values_from = value)  \n  }\n    \n   return(tab1)\n}  \n\n\n우선, 입력할 인자들이 무엇인지 확인하자.\n\n\n코드\nfunction(df, #  데이터프레임 입력\n         cols_to_row,  # \"행 그룹”으로 사용할 열 이름(들).\n         cols_to_col,  # “열 그룹”으로 사용할 열 이름(들).\n         cols_to_summ, # 요약 함수(stat_fun)를 적용할 대상 열 이름(들).\n         stat_fun,     # 요약에 사용할 함수(예: mean, sum, sd 등).\n         stat_to_column = FALSE # 결과를 펼칠 때(pivot_wider) 통계값(STAT)을 열 이름으로 포함할지 여부\n         )\n\n\n\nsyms\n\n\n문자열 벡터를 symbol 리스트로 바꿔준다.\n예를 들어 cols_to_row = c(\"SEX\",\"YEAR\")라면 col1은 list(quote(SEX), quote(YEAR))가 된다.\n이후 !!!(splicing operator)와 함께 group_by() 등에 활용하기 위함이다.\n\n\n\n코드\n  col1 &lt;- syms(cols_to_row)\n  col2 &lt;- syms(cols_to_col)\n  col3 &lt;- syms(cols_to_summ)\n\n\n\n!!!\n\n\n!!! 연산자를 쓰는 이유는, 직접함수를 만들 때 필요한 것으로 입력한 인자를 잘 인식시키기 위한 과정이라 생각하면 된다.\nsyms()로 만들어진 다수의 symbol 리스트를 group_by()나 pivot_longer() 등의 인자에 ’개별 인자’처럼 인식해준다.\n\n\n\n코드\ntab1 &lt;- df %&gt;% group_by(!!!col1, !!!col2)\n\n\n즉, !!!col1 은 “col1이 가진 모든 symbol을 풀어서 인자로 넣어달라”라는 뜻이다.\n예를 들어 col1이 list(quote(SEX), quote(YEAR))라면, group_by(!!!col1)는 group_by(SEX, YEAR)로 동작하게 된다.\n\nsummarise(across...\n\n\n각 그룹별로 cols_to_summ에 지정된 열에 대해, stat_fun을 적용해 요약한다.\n결과 열 이름은 \"{.col}-{.fn}\" 형태로 설정된다.\n\n\n\n코드\nsummarise(across(all_of(cols_to_summ), stat_fun, .names = \"{.col}-{.fn}\"))\n\n\n\npivot_longer(cols = ...\n\n\n요약 후 만들어진 여러 통계량 열(ITEM_F001-mean, ITEM_F001-sd 등)을 세로 형태(long format)로 펼친다.\nnames_sep = \"-\"를 기준으로 ITEM과 STAT 두 부분으로 분리.\n예: ITEM_F001-mean → ITEM = ITEM_F001, STAT = mean.\n\n\n\n코드\npivot_longer(cols = -c(!!!col1, !!!col2), names_to = c(\"ITEM\", \"STAT\"), names_sep = \"-\", values_to = \"value\")\n\n\ncols = -c(!!!col1, !!!col2)는 그룹 열을 제외한 모든 열을 pivot_longer 대상으로 삼는 것.\n\ndplyr::arrange(ITEM)\n\ndplyr패키지 안에 arrange함수를 쓴다는 의미이다.\n\nITEM열 기준으로 정렬(오름차순)한다.\n\n\ndplyr::ungroup()\n\n\n그룹화를 해제한다(추가 연산에서 혼동을 막기 위해).\n\n\nif (stat_to_column) { ... } else { ... }\n\n\nstat_to_column이 TRUE라면, cols_to_col과 STAT 모두를 열 이름으로 펼친다.\n예: [ SEX, YEAR, STAT ] 조합이 열이 됨.\n\n\n\n코드\nif (stat_to_column) { tab1 &lt;- tab1 %&gt;% pivot_wider(names_from = all_of(c(cols_to_col, \"STAT\")), values_from = value) }\n\n\n\nstat_to_column = FALSE이면, cols_to_col만 열 이름으로 사용해서 펼친다.\n결과적으로 STAT은 데이터 행으로 남는다.\n\n\n\n코드\nelse { tab1 &lt;- tab1 %&gt;% pivot_wider(names_from = all_of(cols_to_col), values_from = value) }\n\n\n설명만 보았을 때는 어려우니 뒤에 결과물을 보고 이해해보자.\n\n\n직접만든 함수 적용\n첫번 째 통계표의 경우는\n\n행( row ) 그룹핑 기준: TEST_SEX(성별), TEST_AGE(나이)\n열( column ) 그룹핑 기준: TEST_YEAR(검사연도)\n통계 함수를 적용할 열들: ITEM_F001, ITEM_F002\n계산할 함수: my_summ_func_2\n\n로 표를 만들어준다.\n\n\n코드\ntab1 &lt;- summ_function_general(df1_youth,\n                              c(\"TEST_SEX\", \"TEST_AGE\"),\n                              c(\"TEST_YEAR\"),\n                              c(\"ITEM_F001\", \"ITEM_F002\"),\n                              stat_fun = my_summ_func_2)\n\n\n`summarise()` has grouped output by 'TEST_SEX', 'TEST_AGE'. You can override\nusing the `.groups` argument.\n\n\n코드\nhead(tab1,20) %&gt;% kbl() %&gt;%kable_styling()\n\n\n\n\n\nITEM\nTEST_SEX\nTEST_AGE\nSTAT\n2017\n2018\n2019\n2020\n2021\n2022\n2023\n\n\n\n\nITEM_F001\n남성\n13\n개수\n16.000000\n20.000000\n26.000000\n1.000000\n2.000000\n3.000000\n11.000000\n\n\nITEM_F001\n남성\n13\n평균\n162.350000\n164.715000\n164.892308\n182.800000\n159.400000\n165.266667\n165.609091\n\n\nITEM_F001\n남성\n13\n표준편차\n7.448937\n6.895328\n8.639024\nNA\n6.222540\n2.663331\n9.177304\n\n\nITEM_F001\n남성\n14\n개수\n16.000000\n17.000000\n32.000000\n3.000000\n2.000000\n7.000000\n18.000000\n\n\nITEM_F001\n남성\n14\n평균\n165.456250\n168.505882\n167.603125\n169.433333\n170.600000\n171.714286\n168.388889\n\n\nITEM_F001\n남성\n14\n표준편차\n5.399873\n5.318067\n6.567539\n4.309679\n11.455130\n11.317159\n7.085602\n\n\nITEM_F001\n남성\n15\n개수\n16.000000\n22.000000\n24.000000\n3.000000\n2.000000\n15.000000\n17.000000\n\n\nITEM_F001\n남성\n15\n평균\n269.781250\n170.977273\n173.600000\n170.900000\n169.700000\n173.380000\n174.188235\n\n\nITEM_F001\n남성\n15\n표준편차\n397.692213\n6.552058\n5.362592\n4.622770\n6.646804\n4.947900\n7.105005\n\n\nITEM_F001\n남성\n16\n개수\n15.000000\n32.000000\n23.000000\n4.000000\n7.000000\n16.000000\n11.000000\n\n\nITEM_F001\n남성\n16\n평균\n173.200000\n173.031250\n173.539130\n170.825000\n175.342857\n174.031250\n171.581818\n\n\nITEM_F001\n남성\n16\n표준편차\n7.156915\n4.476421\n6.486751\n6.439138\n2.869296\n5.888488\n5.568989\n\n\nITEM_F001\n남성\n17\n개수\n11.000000\n26.000000\n30.000000\n5.000000\n10.000000\n11.000000\n17.000000\n\n\nITEM_F001\n남성\n17\n평균\n175.000000\n173.450000\n173.573333\n174.260000\n173.140000\n174.981818\n174.352941\n\n\nITEM_F001\n남성\n17\n표준편차\n4.850979\n4.888374\n6.267262\n4.496443\n6.764154\n3.136820\n8.408412\n\n\nITEM_F001\n남성\n18\n개수\n11.000000\n14.000000\n5.000000\n4.000000\n6.000000\n14.000000\n15.000000\n\n\nITEM_F001\n남성\n18\n평균\n174.527273\n174.628571\n171.580000\n169.325000\n176.533333\n176.557143\n171.246667\n\n\nITEM_F001\n남성\n18\n표준편차\n5.833196\n5.844054\n3.834319\n3.718759\n2.445949\n5.852772\n6.460857\n\n\nITEM_F001\n여성\n13\n개수\n17.000000\n11.000000\n16.000000\n2.000000\n5.000000\n10.000000\n13.000000\n\n\nITEM_F001\n여성\n13\n평균\n157.288235\n156.290909\n156.493750\n158.900000\n157.360000\n160.370000\n159.553846\n\n\n\n\n\n\n\n이후 tab2,tab3도 동일하게 알부분만 변경해서 통계표를 만든 결과이다.\n\n\n코드\ntab2 &lt;- summ_function_general(df1_youth,\n                              c(\"TEST_AGE\"), \n                              c(\"TEST_YEAR\", \"TEST_SEX\"),\n                              c(\"ITEM_F001\", \"ITEM_F002\"),\n                              stat_fun = my_summ_func_2)\n\n\n`summarise()` has grouped output by 'TEST_AGE', 'TEST_YEAR'. You can override\nusing the `.groups` argument.\n\n\n코드\nhead(tab2,20) %&gt;% kbl() %&gt;%kable_styling()\n\n\n\n\n\nITEM\nTEST_AGE\nSTAT\n2017_남성\n2017_여성\n2018_남성\n2018_여성\n2019_남성\n2019_여성\n2020_남성\n2020_여성\n2021_남성\n2021_여성\n2022_남성\n2022_여성\n2023_남성\n2023_여성\n\n\n\n\nITEM_F001\n13\n개수\n16.000000\n17.000000\n20.000000\n11.000000\n26.000000\n16.000000\n1.000000\n2.0000000\n2.000000\n5.0000000\n3.000000\n10.000000\n11.000000\n13.000000\n\n\nITEM_F001\n13\n평균\n162.350000\n157.288235\n164.715000\n156.290909\n164.892308\n156.493750\n182.800000\n158.9000000\n159.400000\n157.3600000\n165.266667\n160.370000\n165.609091\n159.553846\n\n\nITEM_F001\n13\n표준편차\n7.448937\n7.663214\n6.895328\n5.826054\n8.639024\n3.423150\nNA\n4.9497475\n6.222540\n1.9060430\n2.663331\n4.903298\n9.177304\n8.704751\n\n\nITEM_F001\n14\n개수\n16.000000\n13.000000\n17.000000\n16.000000\n32.000000\n15.000000\n3.000000\n2.0000000\n2.000000\n4.0000000\n7.000000\n8.000000\n18.000000\n8.000000\n\n\nITEM_F001\n14\n평균\n165.456250\n159.900000\n168.505882\n159.350000\n167.603125\n161.040000\n169.433333\n155.6000000\n170.600000\n158.3250000\n171.714286\n161.875000\n168.388889\n158.962500\n\n\nITEM_F001\n14\n표준편차\n5.399873\n7.355723\n5.318067\n4.665047\n6.567539\n4.529869\n4.309679\n7.7781746\n11.455130\n5.3080913\n11.317159\n4.987341\n7.085602\n6.857100\n\n\nITEM_F001\n15\n개수\n16.000000\n18.000000\n22.000000\n13.000000\n24.000000\n22.000000\n3.000000\n2.0000000\n2.000000\n1.0000000\n15.000000\n8.000000\n17.000000\n18.000000\n\n\nITEM_F001\n15\n평균\n269.781250\n162.316667\n170.977273\n162.400000\n173.600000\n160.622727\n170.900000\n159.9500000\n169.700000\n162.0000000\n173.380000\n160.700000\n174.188235\n160.383333\n\n\nITEM_F001\n15\n표준편차\n397.692213\n5.818353\n6.552058\n6.858450\n5.362592\n5.114678\n4.622770\n3.1819805\n6.646804\nNA\n4.947900\n3.706751\n7.105005\n3.873021\n\n\nITEM_F001\n16\n개수\n15.000000\n14.000000\n32.000000\n24.000000\n23.000000\n21.000000\n4.000000\n2.0000000\n7.000000\n3.0000000\n16.000000\n7.000000\n11.000000\n19.000000\n\n\nITEM_F001\n16\n평균\n173.200000\n159.314286\n173.031250\n160.920833\n173.539130\n159.680952\n170.825000\n158.6500000\n175.342857\n165.0666667\n174.031250\n159.142857\n171.581818\n161.436842\n\n\nITEM_F001\n16\n표준편차\n7.156915\n5.439154\n4.476421\n5.050095\n6.486751\n5.956309\n6.439138\n0.4949747\n2.869296\n0.8504901\n5.888488\n7.628424\n5.568989\n4.344883\n\n\nITEM_F001\n17\n개수\n11.000000\n15.000000\n26.000000\n19.000000\n30.000000\n17.000000\n5.000000\n3.0000000\n10.000000\n6.0000000\n11.000000\n8.000000\n17.000000\n14.000000\n\n\nITEM_F001\n17\n평균\n175.000000\n160.960000\n173.450000\n161.984210\n173.573333\n159.347059\n174.260000\n161.0000000\n173.140000\n158.7333333\n174.981818\n162.437500\n174.352941\n162.385714\n\n\nITEM_F001\n17\n표준편차\n4.850979\n4.036760\n4.888374\n3.481102\n6.267262\n6.197491\n4.496443\n1.5620499\n6.764154\n3.7494889\n3.136820\n4.955210\n8.408412\n5.063574\n\n\nITEM_F001\n18\n개수\n11.000000\n6.000000\n14.000000\n7.000000\n5.000000\n5.000000\n4.000000\n2.0000000\n6.000000\n3.0000000\n14.000000\n11.000000\n15.000000\n12.000000\n\n\nITEM_F001\n18\n평균\n174.527273\n161.150000\n174.628571\n160.471429\n171.580000\n163.080000\n169.325000\n164.5000000\n176.533333\n156.2000000\n176.557143\n162.872727\n171.246667\n160.391667\n\n\nITEM_F001\n18\n표준편차\n5.833196\n6.338060\n5.844054\n6.273945\n3.834319\n4.930213\n3.718759\n5.6568542\n2.445949\n3.5930488\n5.852772\n7.072777\n6.460857\n8.397668\n\n\nITEM_F002\n13\n개수\n16.000000\n17.000000\n20.000000\n11.000000\n26.000000\n16.000000\n1.000000\n2.0000000\n2.000000\n5.0000000\n3.000000\n10.000000\n11.000000\n13.000000\n\n\nITEM_F002\n13\n평균\n56.943750\n52.735294\n64.265000\n51.027273\n63.730769\n49.350000\n97.500000\n53.0000000\n72.850000\n50.3800000\n60.933333\n59.630000\n64.418182\n55.638461\n\n\n\n\n\n\n\n\n\n코드\ntab3 &lt;- summ_function_general(df1_youth,\n                              c(\"TEST_SEX\", \"TEST_AGE\"),\n                              c(\"TEST_YEAR\"),\n                              c(\"ITEM_F001\", \"ITEM_F002\"),\n                              stat_fun = my_summ_func_2,\n                              stat_to_column = TRUE)\n\n\n`summarise()` has grouped output by 'TEST_SEX', 'TEST_AGE'. You can override\nusing the `.groups` argument.\n\n\n코드\nhead(tab3,20) %&gt;% kbl() %&gt;%kable_styling()\n\n\n\n\n\nITEM\nTEST_SEX\nTEST_AGE\n2017_개수\n2017_평균\n2017_표준편차\n2018_개수\n2018_평균\n2018_표준편차\n2019_개수\n2019_평균\n2019_표준편차\n2020_개수\n2020_평균\n2020_표준편차\n2021_개수\n2021_평균\n2021_표준편차\n2022_개수\n2022_평균\n2022_표준편차\n2023_개수\n2023_평균\n2023_표준편차\n\n\n\n\nITEM_F001\n남성\n13\n16\n162.35000\n7.448937\n20\n164.71500\n6.895328\n26\n164.89231\n8.639024\n1\n182.80000\nNA\n2\n159.40000\n6.2225397\n3\n165.26667\n2.663331\n11\n165.60909\n9.177304\n\n\nITEM_F001\n남성\n14\n16\n165.45625\n5.399873\n17\n168.50588\n5.318067\n32\n167.60313\n6.567539\n3\n169.43333\n4.3096790\n2\n170.60000\n11.4551299\n7\n171.71429\n11.317159\n18\n168.38889\n7.085602\n\n\nITEM_F001\n남성\n15\n16\n269.78125\n397.692213\n22\n170.97727\n6.552058\n24\n173.60000\n5.362592\n3\n170.90000\n4.6227697\n2\n169.70000\n6.6468037\n15\n173.38000\n4.947900\n17\n174.18824\n7.105005\n\n\nITEM_F001\n남성\n16\n15\n173.20000\n7.156915\n32\n173.03125\n4.476421\n23\n173.53913\n6.486751\n4\n170.82500\n6.4391381\n7\n175.34286\n2.8692956\n16\n174.03125\n5.888488\n11\n171.58182\n5.568989\n\n\nITEM_F001\n남성\n17\n11\n175.00000\n4.850979\n26\n173.45000\n4.888374\n30\n173.57333\n6.267262\n5\n174.26000\n4.4964430\n10\n173.14000\n6.7641539\n11\n174.98182\n3.136820\n17\n174.35294\n8.408412\n\n\nITEM_F001\n남성\n18\n11\n174.52727\n5.833196\n14\n174.62857\n5.844054\n5\n171.58000\n3.834319\n4\n169.32500\n3.7187588\n6\n176.53333\n2.4459490\n14\n176.55714\n5.852772\n15\n171.24667\n6.460857\n\n\nITEM_F001\n여성\n13\n17\n157.28824\n7.663214\n11\n156.29091\n5.826054\n16\n156.49375\n3.423150\n2\n158.90000\n4.9497475\n5\n157.36000\n1.9060430\n10\n160.37000\n4.903298\n13\n159.55385\n8.704751\n\n\nITEM_F001\n여성\n14\n13\n159.90000\n7.355723\n16\n159.35000\n4.665047\n15\n161.04000\n4.529869\n2\n155.60000\n7.7781746\n4\n158.32500\n5.3080913\n8\n161.87500\n4.987341\n8\n158.96250\n6.857100\n\n\nITEM_F001\n여성\n15\n18\n162.31667\n5.818353\n13\n162.40000\n6.858450\n22\n160.62273\n5.114678\n2\n159.95000\n3.1819805\n1\n162.00000\nNA\n8\n160.70000\n3.706751\n18\n160.38333\n3.873021\n\n\nITEM_F001\n여성\n16\n14\n159.31429\n5.439154\n24\n160.92083\n5.050095\n21\n159.68095\n5.956309\n2\n158.65000\n0.4949747\n3\n165.06667\n0.8504901\n7\n159.14286\n7.628424\n19\n161.43684\n4.344883\n\n\nITEM_F001\n여성\n17\n15\n160.96000\n4.036760\n19\n161.98421\n3.481102\n17\n159.34706\n6.197491\n3\n161.00000\n1.5620499\n6\n158.73333\n3.7494889\n8\n162.43750\n4.955210\n14\n162.38571\n5.063574\n\n\nITEM_F001\n여성\n18\n6\n161.15000\n6.338060\n7\n160.47143\n6.273945\n5\n163.08000\n4.930213\n2\n164.50000\n5.6568542\n3\n156.20000\n3.5930488\n11\n162.87273\n7.072777\n12\n160.39167\n8.397668\n\n\nITEM_F002\n남성\n13\n16\n56.94375\n15.884289\n20\n64.26500\n15.545562\n26\n63.73077\n16.570716\n1\n97.50000\nNA\n2\n72.85000\n36.4159992\n3\n60.93333\n9.154416\n11\n64.41818\n20.188453\n\n\nITEM_F002\n남성\n14\n16\n59.13125\n11.659086\n17\n63.07647\n14.848086\n32\n62.96875\n13.394256\n3\n63.06667\n8.2778822\n2\n91.00000\n21.9203102\n7\n72.95714\n26.349058\n18\n63.50556\n21.315873\n\n\nITEM_F002\n남성\n15\n16\n104.26250\n173.489050\n22\n66.11364\n15.825425\n24\n68.09167\n14.052446\n3\n72.56667\n8.3930527\n2\n69.20000\n0.1414214\n15\n74.46000\n17.230695\n17\n63.67059\n12.500138\n\n\nITEM_F002\n남성\n16\n15\n66.78667\n9.549336\n32\n73.22187\n13.522806\n23\n65.82174\n9.863153\n4\n60.87500\n4.6800107\n7\n76.31429\n9.4735471\n16\n66.16875\n9.440602\n11\n67.37273\n9.252361\n\n\nITEM_F002\n남성\n17\n11\n77.20909\n9.333215\n26\n67.40000\n12.206883\n30\n71.20667\n21.510125\n5\n71.56000\n10.2600195\n10\n86.48000\n25.3946101\n11\n70.89091\n13.501293\n17\n72.18824\n11.797186\n\n\nITEM_F002\n남성\n18\n11\n67.73636\n14.405573\n14\n73.68571\n16.877015\n5\n76.06000\n22.125845\n4\n76.50000\n8.8690473\n6\n80.53333\n18.3988768\n14\n81.91429\n14.448788\n15\n71.98000\n15.796347\n\n\nITEM_F002\n여성\n13\n17\n52.73529\n13.056413\n11\n51.02727\n12.546481\n16\n49.35000\n7.319381\n2\n53.00000\n4.2426407\n5\n50.38000\n6.3762842\n10\n59.63000\n15.168831\n13\n55.63846\n15.079596\n\n\nITEM_F002\n여성\n14\n13\n53.63846\n16.585965\n16\n52.63750\n5.889298\n15\n58.50000\n14.159600\n2\n62.65000\n2.0506097\n4\n58.05000\n8.8925062\n8\n57.45000\n11.006751\n8\n55.66250\n15.383752",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>데이터 요약표 작성의 기초</span>"
    ]
  },
  {
    "objectID": "docs/chapter-03.html",
    "href": "docs/chapter-03.html",
    "title": "4  통계표 출판",
    "section": "",
    "text": "4.1 소개\n통계표를 출력하기 위해 대표적으로 2가지 패키지가 존재한다.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>통계표 출판</span>"
    ]
  },
  {
    "objectID": "docs/chapter-03.html#소개",
    "href": "docs/chapter-03.html#소개",
    "title": "4  통계표 출판",
    "section": "",
    "text": "Quarto\n\n\n여러가지 방법으로 생산된 문서를 다양한 형식(html, pdf, docx, \\(\\cdots\\))으로 출판할 수 있도록 하는 저작도구.\n마크다운 언어와 프로그래밍 언어를 같이 사용할 수 있는 기능.\n지금 강의노트제작도 Quarto로 제작했다.\n\n\nflextable\n\n\n데이터프레임을 표(table)로 변환하여 다양한 형식(html, pdf, docx,\\(\\cdots\\))으로 출판할 수 패키지.\n표에 대한 다양한 형식과 여러가지 기능을 제공.\n보고서 수준의 고품질 통계표를 출력 가능.\n\n\nflextable로 출력방법설명\nflextable을 이용해 아래한글(HWP)까지 출력하는 방법을 소개해보고자 한다.\n결과표 또는 통계표를 갖고 flextable을 이용해 출력하는 방법은 다음과 같다.\n\n프로그램 R을 이용해 원하는 통계결과표를 작성한다.\nflextable을 이용해 워드(docx)로 출력한다.\n워드(docx)로 출력한 표를 아래한글(HWP)로 출력한다.\n\n방법을 알았으니 flextable을 쓰는 방법을 다음 섹션에서 확인해보자.\n\n\n간단한 flextable 예시\n이전 챕터 dplyr,tidyr패키지의 함수소개에서 쓰인 데이터프레임을 갖고 flextable을 보이는 함수를 소개한다.\n\n\n코드\nlibrary(flextable)\n\ndf &lt;- data.frame(\n  이름 = c(\"홍길동\", \"김영희\", \"박찬호\", \"이소라\", \"최민식\"),\n  나이 = c(25, 30, 35, 40, 28),\n  도시 = c(\"서울\", \"부산\", \"서울\", \"인천\", \"부산\"),\n  점수 = c(80, 90, 75, 82, 95)\n)\n\n\n\n기본 flextable 생성\n\n데이터프레임 df를 가장 기본적인 flextable 형태로 보여준다.\n\n\n코드\nft1 &lt;- flextable(df)\nft1\n\n\n이름나이도시점수홍길동25서울80김영희30부산90박찬호35서울75이소라40인천82최민식28부산95\n\n\n\n헤더(header) 스타일 및 테마 적용\n\n테이블에서 헤더부분의 행이름부분의 스타일을 설정하는 방법은 다음과 같다.\n\n\n코드\nft2 &lt;- flextable(df)\n# 헤더 부분을 굵게(bold) 설정\nft2 &lt;- bold(ft2, part = \"header\")\n\n# 헤더 배경 색 지정\nft2 &lt;- bg(ft2, bg = \"#F5F5F5\", part = \"header\")\n\n# 표 전체 너비를 자동으로 맞추기\nft2 &lt;- autofit(ft2)\n\n# 박스형 테마 적용(선 굵기가 약간 강조됨)\nft2 &lt;- theme_box(ft2)\n\nft2\n\n\n이름나이도시점수홍길동25서울80김영희30부산90박찬호35서울75이소라40인천82최민식28부산95\n\n\n\nbold(ft2, part = \"header\"): 헤더를 볼드체로 만듦\nbg(ft2, bg = \"#F5F5F5\", part = \"header\"): 헤더에 배경색을 입힘\nautofit(): 열 너비를 데이터에 맞게 자동 조정\ntheme_box(): 테이블에 살짝 박스형 테마 적용\n\n\n조건부 색상 적용\n\n점수가 80 미만인 행 강조하는 코드는 다음과 같다.\n\n\n코드\nft3 &lt;- flextable(df)\n\n# 조건: 점수가 80 미만인 경우, 해당 행의 \"점수\" 셀 글씨 색을 빨간색으로\nft3 &lt;- color(ft3, i = ~ 점수 &lt; 80, j = \"점수\", color = \"red\")\n\n# 조건: 점수가 80 미만인 경우, 해당 행의 배경을 옅은 분홍색으로\nft3 &lt;- bg(ft3, i = ~ 점수 &lt; 80, bg = \"#FFF0F0\")\n\n# 조금 더 보기 좋게 자동 너비 조정\nft3 &lt;- autofit(ft3)\n\nft3\n\n\n이름나이도시점수홍길동25서울80김영희30부산90박찬호35서울75이소라40인천82최민식28부산95\n\n\n\ncolor(ft3, i = ~ 점수 &lt; 80, j = \"점수\", color = \"red\") 조건(점수 &lt; 80)을 만족하는 행의 점수 열을 빨간색 글씨로.\nbg(ft3, i = ~ 점수 &lt; 80, bg = \"#FFF0F0\") 동일한 조건을 만족하는 행의 전체 셀 배경을 옅은 분홍색으로.\n\n\n일부 열 정렬 및 숫자 포맷 지정\n\n일부 열에 숫자를 우측으로 정렬하고 싶거나, 표에 제목을 삽입하고 싶은 경우는 다음과 같다.\n\n\n코드\nft4 &lt;- flextable(df)\n\n# 나이, 점수 열을 우측 정렬\nft4 &lt;- align(ft4, j = c(\"나이\", \"점수\"), align = \"right\", part = \"body\")\n\n# 표의 제목 삽입\nft4 &lt;- add_header_row(\n  ft4,\n  values = c(\"성적표 예시\"),\n  colwidths = 4\n)\n\n# 표 너비 자동 설정\nft4 &lt;- autofit(ft4)\n\nft4\n\n\n성적표 예시이름나이도시점수홍길동25서울80김영희30부산90박찬호35서울75이소라40인천82최민식28부산95\n\n\n\nalign(..., align = \"right\"): 숫자 열을 우측 정렬\nadd_header_row(): 전체 표 위에 큰 헤더(타이틀) 한 줄 추가\ncolwidths = 4는 한 줄을 4개의 컬럼(columns) 폭만큼 병합해서 하나로 만든다는 의미",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>통계표 출판</span>"
    ]
  },
  {
    "objectID": "docs/chapter-03.html#통계표의-출력",
    "href": "docs/chapter-03.html#통계표의-출력",
    "title": "4  통계표 출판",
    "section": "4.2 통계표의 출력",
    "text": "4.2 통계표의 출력\n이전 챕터에서 쓴초등학교 체력측정 자료의 통계표를 활용해보자.\n3가지 스타일의 통계표를 보인 결과를 flextable로 출력해보자.\n\n\n코드\nload(here::here(\"data\", \"physical100_data.RData\"))\nls()\n\n\n[1] \"df\"        \"df1_youth\" \"ft1\"       \"ft2\"       \"ft3\"       \"ft4\"      \n\n\n\n\n코드\ntab1 &lt;- summ_function_general(df1_youth, c(\"TEST_SEX\", \"TEST_AGE\"), c(\"TEST_YEAR\"), c(\"ITEM_F001\", \"ITEM_F002\"), stat_fun = my_summ_func_2)\n\ntab2 &lt;- summ_function_general(df1_youth, c(\"TEST_AGE\"), c(\"TEST_YEAR\", \"TEST_SEX\"), c(\"ITEM_F001\", \"ITEM_F002\"), stat_fun = my_summ_func_2)\n\ntab3 &lt;- summ_function_general(df1_youth, c(\"TEST_SEX\", \"TEST_AGE\"), c(\"TEST_YEAR\"), c(\"ITEM_F001\", \"ITEM_F002\"), stat_fun = my_summ_func_2, stat_to_column = TRUE)\n\n\n\n예제\ntab1의 통계표를 다음과 같이 적용한다.\n\ntab1_cols &lt;- colnames(tab1)\n\ntab1의 모든 열 이름을 추출해 tab1_cols에 저장한다.\n이 값은 곧 flextable(col_keys = tab1_cols)에서 사용된다.\n\ntab1 %&gt;% dplyr::group_by(ITEM, TEST_SEX, TEST_AGE)\n\ntab1를 ITEM, TEST_SEX, TEST_AGE 조합으로 그룹화한다.\n이후 mutate() 등에서 그룹 내 계산을 수행할 수 있다.\n\ndplyr::mutate(is_last_val_in_group = row_number() == max(row_number()))\n\n각 그룹별(ITEM, TEST_SEX, TEST_AGE)로 행 번호(row_number())를 매기고, 그 번호가 그룹 내 최대값이면 TRUE를, 아니면 FALSE를 is_last_val_in_group 컬럼에 저장한다.\n\nflextable(col_keys = tab1_cols )\n\nflextable 패키지로 tab1를 테이블 형태로 변환한다.\ncol_keys = tab1_cols로 지정해, 모든 열(이름은 tab1_cols)을 테이블에 표시한다.\n\nmerge_v(j = 1:3)\n\nj = 1:3는 테이블의 첫 번째 부터 세 번째 열에 대해 세로 병합을 적용하겠다는 의미이다.\n\nautofit()\n\n셀 너비와 높이를 자동으로 맞추도록 설정한다.\n\ntheme_booktabs(bold_header = TRUE)\n\nflextable의 테마를 “booktabs” 스타일로 지정하고, 헤더(header)를 볼드체로 만든다.\n\nalign(align = \"left\", part = \"header\", j =1:3)\n\n테이블의 헤더 부분(part = \"header\") 중, 첫 3개 열(j =1:3)을 왼쪽 정렬(\"left\")한다.\n\ncolformat_double(i = ~(STAT==\"개수\" | STAT==\"결측개수\"), digits = 0, big.mark = get_flextable_defaults()$big.mark)\n\n숫자 서식 지정 함수로써,\ni = ~(STAT==\"개수\" | STAT==\"결측개수\"): 조건식으로, STAT 열이 \"개수\" 또는 \"결측개수\"인 행을 골라낸다.\n해당 셀들의 표시 소수점 자릿수(digits)를 0으로 설정 → 정수로 표현.\n\ncolformat_double(i = ~!(STAT==\"개수\" | STAT==\"결측개수\"), digits = 2)\n\n바로 위와 비슷한 숫자 서식 지정이지만, 조건이 STAT가 “개수” 또는 “결측개수”가 아닌 경우(!())이다.\n소수점 자릿수를 2로 설정 → 소수 둘째 자리까지 표시한다.\n\nhline(i = ~is_last_val_in_group == TRUE, border = fp_border())\n\n가로줄(hline)을 추가한다.\ni = ~is_last_val_in_group == TRUE → 각 그룹의 마지막 행에 가로줄을 그린다.\nfp_border()는 flextable에서 제공하는 테두리(border) 설정 함수로, 기본 스타일의 선을 만든다.\n\nfix_border_issues()\n\n테이블 테두리 관련된 미세한 문제를 자동으로 조정(수정)해 주는 함수이다.\n\n\n코드\ntab1_cols &lt;- colnames(tab1)\nAA &lt;-  tab1 %&gt;% \n    dplyr::group_by(ITEM, TEST_SEX, TEST_AGE) %&gt;%\n    dplyr::mutate(is_last_val_in_group = row_number() == max(row_number()))  %&gt;%\n    flextable(col_keys = tab1_cols ) %&gt;% \n    merge_v( j = 1:3 )  %&gt;%\n    autofit()  %&gt;%\n    theme_booktabs(bold_header = TRUE) %&gt;%\n    align(align = \"left\", part = \"header\", j =1:3) %&gt;% \n    colformat_double(i = ~(`STAT`==\"개수\" | `STAT`==\"결측개수\" ) , digits = 0,\n                      big.mark =     get_flextable_defaults()$big.mark) %&gt;%\n    colformat_double(i = ~!(`STAT`==\"개수\" | `STAT`==\"결측개수\" ), digits = 2) %&gt;%\n    hline(i = ~is_last_val_in_group == TRUE, border = fp_border()) %&gt;%\n    fix_border_issues() \n\nAA\n\n\nITEMTEST_SEXTEST_AGESTAT2017201820192020202120222023ITEM_F001남성13개수16202612311평균162.35164.72164.89182.80159.40165.27165.61표준편차7.456.908.646.222.669.1814개수16173232718평균165.46168.51167.60169.43170.60171.71168.39표준편차5.405.326.574.3111.4611.327.0915개수162224321517평균269.78170.98173.60170.90169.70173.38174.19표준편차397.696.555.364.626.654.957.1116개수153223471611평균173.20173.03173.54170.82175.34174.03171.58표준편차7.164.486.496.442.875.895.5717개수1126305101117평균175.00173.45173.57174.26173.14174.98174.35표준편차4.854.896.274.506.763.148.4118개수11145461415평균174.53174.63171.58169.32176.53176.56171.25표준편차5.835.843.833.722.455.856.46여성13개수171116251013평균157.29156.29156.49158.90157.36160.37159.55표준편차7.665.833.424.951.914.908.7014개수1316152488평균159.90159.35161.04155.60158.32161.88158.96표준편차7.364.674.537.785.314.996.8615개수18132221818평균162.32162.40160.62159.95162.00160.70160.38표준편차5.826.865.113.183.713.8716개수14242123719평균159.31160.92159.68158.65165.07159.14161.44표준편차5.445.055.960.490.857.634.3417개수15191736814평균160.96161.98159.35161.00158.73162.44162.39표준편차4.043.486.201.563.754.965.0618개수675231112평균161.15160.47163.08164.50156.20162.87160.39표준편차6.346.274.935.663.597.078.40ITEM_F002남성13개수16202612311평균56.9464.2763.7397.5072.8560.9364.42표준편차15.8815.5516.5736.429.1520.1914개수16173232718평균59.1363.0862.9763.0791.0072.9663.51표준편차11.6614.8513.398.2821.9226.3521.3215개수162224321517평균104.2666.1168.0972.5769.2074.4663.67표준편차173.4915.8314.058.390.1417.2312.5016개수153223471611평균66.7973.2265.8260.8876.3166.1767.37표준편차9.5513.529.864.689.479.449.2517개수1126305101117평균77.2167.4071.2171.5686.4870.8972.19표준편차9.3312.2121.5110.2625.3913.5011.8018개수11145461415평균67.7473.6976.0676.5080.5381.9171.98표준편차14.4116.8822.138.8718.4014.4515.80여성13개수171116251013평균52.7451.0349.3553.0050.3859.6355.64표준편차13.0612.557.324.246.3815.1715.0814개수1316152488평균53.6452.6458.5062.6558.0557.4555.66표준편차16.595.8914.162.058.8911.0115.3815개수18132221818평균58.8861.7856.9061.4050.4057.3955.48표준편차11.4511.757.0419.6612.228.6616개수14242123719평균56.2157.6758.6556.7562.1355.5754.39표준편차8.177.2512.115.1611.649.226.1217개수15191736814평균62.9755.2561.2256.7055.2561.3657.06표준편차13.1913.8916.3313.354.4014.4115.3318개수675231112평균61.9258.0163.8854.3055.5356.3151.76표준편차16.529.3110.744.386.508.567.47\n\n\n이러한 형태로 다음 통계표도 비슷하게 결과를 낼 수 있다.\n하지만 매번 통계표를 구할 때 복잡한 코드를 입력하기 어려우니 이 경우에도 함수를 만들어서 간편하게 돌려보자.\n\n\n코드\ntab2_cols &lt;- colnames(tab2)\nBB &lt;-  tab2 %&gt;% \n    dplyr::group_by(ITEM, TEST_AGE) %&gt;%\n    dplyr::mutate(is_last_val_in_group = row_number() == max(row_number()))  %&gt;%\n    flextable(col_keys = tab2_cols ) %&gt;% \n    merge_v( j = 1:2 )  %&gt;%\n    valign(j = 1:2, valign = \"top\") %&gt;%\n    separate_header() %&gt;% \n    autofit()  %&gt;%\n    theme_booktabs(bold_header = TRUE) %&gt;%\n    align(align = \"left\", part = \"header\", j =1:3) %&gt;% \n    colformat_double(i = ~(`STAT`==\"개수\" | `STAT`==\"결측개수\" ) , digits = 0,\n                      big.mark =     get_flextable_defaults()$big.mark) %&gt;%\n    colformat_double(i = ~!(`STAT`==\"개수\" | `STAT`==\"결측개수\" ), digits = 2) %&gt;%\n    hline(i = ~is_last_val_in_group == TRUE, border = fp_border()) %&gt;%\n    fix_border_issues() \n\nBB\n\n\nITEMTESTSTAT2017201820192020202120222023AGE남성여성남성여성남성여성남성여성남성여성남성여성남성여성ITEM_F00113개수16172011261612253101113평균162.35157.29164.72156.29164.89156.49182.80158.90159.40157.36165.27160.37165.61159.55표준편차7.457.666.905.838.643.424.956.221.912.664.909.188.7014개수161317163215322478188평균165.46159.90168.51159.35167.60161.04169.43155.60170.60158.32171.71161.88168.39158.96표준편차5.407.365.324.676.574.534.317.7811.465.3111.324.997.096.8615개수16182213242232211581718평균269.78162.32170.98162.40173.60160.62170.90159.95169.70162.00173.38160.70174.19160.38표준편차397.695.826.556.865.365.114.623.186.654.953.717.113.8716개수15143224232142731671119평균173.20159.31173.03160.92173.54159.68170.82158.65175.34165.07174.03159.14171.58161.44표준편차7.165.444.485.056.495.966.440.492.870.855.897.635.574.3417개수111526193017531061181714평균175.00160.96173.45161.98173.57159.35174.26161.00173.14158.73174.98162.44174.35162.39표준편차4.854.044.893.486.276.204.501.566.763.753.144.968.415.0618개수11614755426314111512평균174.53161.15174.63160.47171.58163.08169.32164.50176.53156.20176.56162.87171.25160.39표준편차5.836.345.846.273.834.933.725.662.453.595.857.076.468.40ITEM_F00213개수16172011261612253101113평균56.9452.7464.2751.0363.7349.3597.5053.0072.8550.3860.9359.6364.4255.64표준편차15.8813.0615.5512.5516.577.324.2436.426.389.1515.1720.1915.0814개수161317163215322478188평균59.1353.6463.0852.6462.9758.5063.0762.6591.0058.0572.9657.4563.5155.66표준편차11.6616.5914.855.8913.3914.168.282.0521.928.8926.3511.0121.3215.3815개수16182213242232211581718평균104.2658.8866.1161.7868.0956.9072.5761.4069.2050.4074.4657.3963.6755.48표준편차173.4911.4515.8311.7514.057.048.3919.660.1417.2312.2212.508.6616개수15143224232142731671119평균66.7956.2173.2257.6765.8258.6560.8856.7576.3162.1366.1755.5767.3754.39표준편차9.558.1713.527.259.8612.114.685.169.4711.649.449.229.256.1217개수111526193017531061181714평균77.2162.9767.4055.2571.2161.2271.5656.7086.4855.2570.8961.3672.1957.06표준편차9.3313.1912.2113.8921.5116.3310.2613.3525.394.4013.5014.4111.8015.3318개수11614755426314111512평균67.7461.9273.6958.0176.0663.8876.5054.3080.5355.5381.9156.3171.9851.76표준편차14.4116.5216.889.3122.1310.748.874.3818.406.5014.458.5615.807.47\n\n\n\n\n코드\ntab3_cols &lt;- colnames(tab3)\nCC &lt;-  tab3 %&gt;% \n    dplyr::group_by(ITEM, TEST_SEX) %&gt;%\n    dplyr::mutate(is_last_val_in_group = row_number() == max(row_number()))  %&gt;%\n    flextable(col_keys = tab3_cols ) %&gt;% \n    merge_v( j = 1:2 )  %&gt;%\n    valign(j = 1:2, valign = \"top\") %&gt;%\n    separate_header() %&gt;% \n    autofit()  %&gt;%\n    theme_booktabs(bold_header = TRUE) %&gt;%\n    align(align = \"left\", part = \"header\", j =1:3) %&gt;% \n    #colformat_double(i = ~(`STAT`==\"개수\" | `STAT`==\"결측개수\" ) , digits = 0,\n    #                  big.mark =     get_flextable_defaults()$big.mark) %&gt;%\n    #colformat_double(i = ~!(`STAT`==\"개수\" | `STAT`==\"결측개수\" ), digits = 2) %&gt;%\n    hline(i = ~is_last_val_in_group == TRUE, border = fp_border()) %&gt;%\n    fix_border_issues() \n\nCC\n\n\nITEMTEST2017201820192020202120222023SEXAGE개수평균표준편차개수평균표준편차개수평균표준편차개수평균표준편차개수평균표준편차개수평균표준편차개수평균표준편차ITEM_F001남성1316162.350007.44893720164.715006.89532826164.892318.6390241182.800002159.400006.22253973165.266672.66333111165.609099.1773041416165.456255.39987317168.505885.31806732167.603136.5675393169.433334.30967902170.6000011.45512997171.7142911.31715918168.388897.0856021516269.78125397.69221322170.977276.55205824173.600005.3625923170.900004.62276972169.700006.646803715173.380004.94790017174.188247.1050051615173.200007.15691532173.031254.47642123173.539136.4867514170.825006.43913817175.342862.869295616174.031255.88848811171.581825.5689891711175.000004.85097926173.450004.88837430173.573336.2672625174.260004.496443010173.140006.764153911174.981823.13681917174.352948.4084121811174.527275.83319714174.628575.8440545171.580003.8343194169.325003.71875886176.533332.445949014176.557145.85277215171.246676.460856여성1317157.288247.66321411156.290915.82605416156.493753.4231502158.900004.94974755157.360001.906043010160.370004.90329813159.553858.7047511413159.900007.35572316159.350004.66504715161.040004.5298692155.600007.77817464158.325005.30809138161.875004.9873418158.962506.8571001518162.316675.81835313162.400006.85845022160.622735.1146782159.950003.18198051162.000008160.700003.70675118160.383333.8730211614159.314295.43915424160.920835.05009521159.680955.9563092158.650000.49497473165.066670.85049017159.142867.62842419161.436844.3448831715160.960004.03676019161.984213.48110217159.347066.1974913161.000001.56204996158.733333.74948898162.437504.95521014162.385715.063574186161.150006.3380607160.471436.2739455163.080004.9302132164.500005.65685423156.200003.593048811162.872737.07277812160.391678.397668ITEM_F002남성131656.9437515.8842892064.2650015.5455622663.7307716.570716197.50000272.8500036.4159992360.933339.1544161164.4181820.188453141659.1312511.6590861763.0764714.8480863262.9687513.394256363.066678.2778822291.0000021.9203102772.9571426.3490581863.5055621.3158731516104.26250173.4890502266.1136415.8254252468.0916714.052446372.566678.3930527269.200000.14142141574.4600017.2306951763.6705912.500138161566.786679.5493363273.2218713.5228062365.821749.863153460.875004.6800107776.314299.47354711666.168759.4406021167.372739.252361171177.209099.3332152667.4000012.2068833071.2066721.510125571.5600010.26001951086.4800025.39461011170.8909113.5012931772.1882411.797186181167.7363614.4055731473.6857116.877015576.0600022.125845476.500008.8690473680.5333318.39887681481.9142914.4487881571.9800015.796347여성131752.7352913.0564131151.0272712.5464811649.350007.319381253.000004.2426407550.380006.37628421059.6300015.1688311355.6384615.079597141353.6384616.5859651652.637505.8892981558.5000014.159600262.650002.0506097458.050008.8925062857.4500011.006751855.6625015.383752151858.8833311.4478491361.7769211.7479192256.900007.043065261.4000019.6575685150.40000857.3875012.2185381855.477788.658933161456.207148.1678042457.675007.2539792158.6523812.105933256.750005.1618795362.1333311.6423079755.571439.2247341954.394746.117504171562.9666713.1934871955.2526313.8864991761.2235316.329671356.7000013.3461605655.250004.4021586861.3625014.4139751457.0642915.33490818661.9166716.521794758.014299.313866563.8800010.742998254.300004.3840620355.533336.50410131156.309098.5598431251.760007.470178\n\n\n\n\n함수만들기 (함수보완수정추후 예정)\nflextable도 dplyr,tidyr와 마찬가지로 여러가지 세부조정을 할수 있기에 코드가 많이 복잡할 수 있다.\n또한, 통계표를 1개만 출력하는 것이 아니기에 여러가지 통계표를 출력하는 데 비효율적이므로 함수를 만들어서 간편하게 통계표를 출력해보자.\ntable_function_general은 예제에 나온 코드와의 차이점은\n\n“이 데이터프레임의 상위 몇 개 열을 ’행 그룹’으로 지정할 것인지”를 num_group_rows로 조절한다.\n직접함수를 만들 때 필요한 것으로 입력한 인자를 잘 인식시키기 위해 !!!와 syms를 적용했다.\n\n\n\n코드\ntable_function_general &lt;- function(df, num_group_rows) {\n  \n    table_cols &lt;- colnames(df)\n    col1 &lt;- syms(table_cols[1:num_group_rows])\n\nft1 &lt;-  df %&gt;% \n\n    dplyr::group_by(!!!col1) %&gt;%\n    dplyr::mutate(is_last_val_in_group = row_number() == max(row_number()))  %&gt;%\n    flextable(col_keys = table_cols ) %&gt;% \n    merge_v( j = 1:num_group_rows )  %&gt;%\n    valign(j = 1:(num_group_rows), valign = \"top\") %&gt;%\n    separate_header() %&gt;%\n    autofit()  %&gt;%\n    theme_booktabs(bold_header = TRUE) %&gt;%\n    align(align = \"left\", part = \"header\", j =1:num_group_rows) %&gt;% \n    #colformat_double(i = ~(`STAT`==\"개수\" | `STAT`==\"결측개수\" ) , digits = 0,\n    #                  big.mark =     get_flextable_defaults()$big.mark) %&gt;%\n    #colformat_double(i = ~!(`STAT`==\"개수\" | `STAT`==\"결측개수\" ), digits = 2) %&gt;%\n    hline(i = ~is_last_val_in_group == TRUE, border = fp_border()) %&gt;%\n    fix_border_issues() \n\n    return(ft1)\n}\n\n\n직접 만든 함수를 사용하여 다음과 같이 통계표를 쉽게 구할 수 있다.\n\n\n코드\nmytable1 &lt;- table_function_general(tab1, 3)\nmytable1 \n\n\nITEMTESTSTAT2017201820192020202120222023SEXAGEITEM_F001남성13개수16.00000020.00000026.0000001.00000002.00000003.00000011.000000평균162.350000164.715000164.892308182.8000000159.4000000165.266667165.609091표준편차7.4489376.8953288.6390246.22253972.6633319.17730414개수16.00000017.00000032.0000003.00000002.00000007.00000018.000000평균165.456250168.505882167.603125169.4333333170.6000000171.714286168.388889표준편차5.3998735.3180676.5675394.309679011.455129911.3171597.08560215개수16.00000022.00000024.0000003.00000002.000000015.00000017.000000평균269.781250170.977273173.600000170.9000000169.7000000173.380000174.188235표준편차397.6922136.5520585.3625924.62276976.64680374.9479007.10500516개수15.00000032.00000023.0000004.00000007.000000016.00000011.000000평균173.200000173.031250173.539130170.8250000175.3428571174.031250171.581818표준편차7.1569154.4764216.4867516.43913812.86929565.8884885.56898917개수11.00000026.00000030.0000005.000000010.000000011.00000017.000000평균175.000000173.450000173.573333174.2600000173.1400000174.981818174.352941표준편차4.8509794.8883746.2672624.49644306.76415393.1368198.40841218개수11.00000014.0000005.0000004.00000006.000000014.00000015.000000평균174.527273174.628571171.580000169.3250000176.5333333176.557143171.246667표준편차5.8331975.8440543.8343193.71875882.44594905.8527726.460856여성13개수17.00000011.00000016.0000002.00000005.000000010.00000013.000000평균157.288235156.290909156.493750158.9000000157.3600000160.370000159.553846표준편차7.6632145.8260543.4231504.94974751.90604304.9032988.70475114개수13.00000016.00000015.0000002.00000004.00000008.0000008.000000평균159.900000159.350000161.040000155.6000000158.3250000161.875000158.962500표준편차7.3557234.6650474.5298697.77817465.30809134.9873416.85710015개수18.00000013.00000022.0000002.00000001.00000008.00000018.000000평균162.316667162.400000160.622727159.9500000162.0000000160.700000160.383333표준편차5.8183536.8584505.1146783.18198053.7067513.87302116개수14.00000024.00000021.0000002.00000003.00000007.00000019.000000평균159.314286160.920833159.680952158.6500000165.0666667159.142857161.436842표준편차5.4391545.0500955.9563090.49497470.85049017.6284244.34488317개수15.00000019.00000017.0000003.00000006.00000008.00000014.000000평균160.960000161.984211159.347059161.0000000158.7333333162.437500162.385714표준편차4.0367603.4811026.1974911.56204993.74948894.9552105.06357418개수6.0000007.0000005.0000002.00000003.000000011.00000012.000000평균161.150000160.471429163.080000164.5000000156.2000000162.872727160.391667표준편차6.3380606.2739454.9302135.65685423.59304887.0727788.397668ITEM_F002남성13개수16.00000020.00000026.0000001.00000002.00000003.00000011.000000평균56.94375064.26500063.73076997.500000072.850000060.93333364.418182표준편차15.88428915.54556216.57071636.41599929.15441620.18845314개수16.00000017.00000032.0000003.00000002.00000007.00000018.000000평균59.13125063.07647162.96875063.066666791.000000072.95714363.505556표준편차11.65908614.84808613.3942568.277882221.920310226.34905821.31587315개수16.00000022.00000024.0000003.00000002.000000015.00000017.000000평균104.26250066.11363668.09166772.566666769.200000074.46000063.670588표준편차173.48905015.82542514.0524468.39305270.141421417.23069512.50013816개수15.00000032.00000023.0000004.00000007.000000016.00000011.000000평균66.78666773.22187565.82173960.875000076.314285766.16875067.372727표준편차9.54933613.5228069.8631534.68001079.47354719.4406029.25236117개수11.00000026.00000030.0000005.000000010.000000011.00000017.000000평균77.20909167.40000071.20666771.560000086.480000070.89090972.188235표준편차9.33321512.20688321.51012510.260019525.394610113.50129311.79718618개수11.00000014.0000005.0000004.00000006.000000014.00000015.000000평균67.73636473.68571476.06000076.500000080.533333381.91428671.980000표준편차14.40557316.87701522.1258458.869047318.398876814.44878815.796347여성13개수17.00000011.00000016.0000002.00000005.000000010.00000013.000000평균52.73529451.02727349.35000053.000000050.380000059.63000055.638462표준편차13.05641312.5464817.3193814.24264076.376284215.16883115.07959714개수13.00000016.00000015.0000002.00000004.00000008.0000008.000000평균53.63846252.63750058.50000062.650000058.050000057.45000055.662500표준편차16.5859655.88929814.1596002.05060978.892506211.00675115.38375215개수18.00000013.00000022.0000002.00000001.00000008.00000018.000000평균58.88333361.77692356.90000061.400000050.400000057.38750055.477778표준편차11.44784911.7479197.04306519.657568512.2185388.65893316개수14.00000024.00000021.0000002.00000003.00000007.00000019.000000평균56.20714357.67500058.65238156.750000062.133333355.57142954.394737표준편차8.1678047.25397912.1059335.161879511.64230799.2247346.11750417개수15.00000019.00000017.0000003.00000006.00000008.00000014.000000평균62.96666755.25263261.22352956.700000055.250000061.36250057.064286표준편차13.19348713.88649916.32967113.34616054.402158614.41397515.33490818개수6.0000007.0000005.0000002.00000003.000000011.00000012.000000평균61.91666758.01428663.88000054.300000055.533333356.30909151.760000표준편차16.5217949.31386610.7429984.38406206.50410138.5598437.470178\n\n\n코드\nmytable2 &lt;- table_function_general(tab2, 2)\nmytable2 \n\n\nITEMTESTSTAT2017201820192020202120222023AGE남성여성남성여성남성여성남성여성남성여성남성여성남성여성ITEM_F00113개수16.00000017.00000020.00000011.00000026.00000016.0000001.0000002.00000002.00000005.00000003.00000010.00000011.00000013.000000평균162.350000157.288235164.715000156.290909164.892308156.493750182.800000158.9000000159.4000000157.3600000165.266667160.370000165.609091159.553846표준편차7.4489377.6632146.8953285.8260548.6390243.4231504.94974756.22253971.90604302.6633314.9032989.1773048.70475114개수16.00000013.00000017.00000016.00000032.00000015.0000003.0000002.00000002.00000004.00000007.0000008.00000018.0000008.000000평균165.456250159.900000168.505882159.350000167.603125161.040000169.433333155.6000000170.6000000158.3250000171.714286161.875000168.388889158.962500표준편차5.3998737.3557235.3180674.6650476.5675394.5298694.3096797.778174611.45512995.308091311.3171594.9873417.0856026.85710015개수16.00000018.00000022.00000013.00000024.00000022.0000003.0000002.00000002.00000001.000000015.0000008.00000017.00000018.000000평균269.781250162.316667170.977273162.400000173.600000160.622727170.900000159.9500000169.7000000162.0000000173.380000160.700000174.188235160.383333표준편차397.6922135.8183536.5520586.8584505.3625925.1146784.6227703.18198056.64680374.9479003.7067517.1050053.87302116개수15.00000014.00000032.00000024.00000023.00000021.0000004.0000002.00000007.00000003.000000016.0000007.00000011.00000019.000000평균173.200000159.314286173.031250160.920833173.539130159.680952170.825000158.6500000175.3428571165.0666667174.031250159.142857171.581818161.436842표준편차7.1569155.4391544.4764215.0500956.4867515.9563096.4391380.49497472.86929560.85049015.8884887.6284245.5689894.34488317개수11.00000015.00000026.00000019.00000030.00000017.0000005.0000003.000000010.00000006.000000011.0000008.00000017.00000014.000000평균175.000000160.960000173.450000161.984211173.573333159.347059174.260000161.0000000173.1400000158.7333333174.981818162.437500174.352941162.385714표준편차4.8509794.0367604.8883743.4811026.2672626.1974914.4964431.56204996.76415393.74948893.1368194.9552108.4084125.06357418개수11.0000006.00000014.0000007.0000005.0000005.0000004.0000002.00000006.00000003.000000014.00000011.00000015.00000012.000000평균174.527273161.150000174.628571160.471429171.580000163.080000169.325000164.5000000176.5333333156.2000000176.557143162.872727171.246667160.391667표준편차5.8331976.3380605.8440546.2739453.8343194.9302133.7187595.65685422.44594903.59304885.8527727.0727786.4608568.397668ITEM_F00213개수16.00000017.00000020.00000011.00000026.00000016.0000001.0000002.00000002.00000005.00000003.00000010.00000011.00000013.000000평균56.94375052.73529464.26500051.02727363.73076949.35000097.50000053.000000072.850000050.380000060.93333359.63000064.41818255.638462표준편차15.88428913.05641315.54556212.54648116.5707167.3193814.242640736.41599926.37628429.15441615.16883120.18845315.07959714개수16.00000013.00000017.00000016.00000032.00000015.0000003.0000002.00000002.00000004.00000007.0000008.00000018.0000008.000000평균59.13125053.63846263.07647152.63750062.96875058.50000063.06666762.650000091.000000058.050000072.95714357.45000063.50555655.662500표준편차11.65908616.58596514.8480865.88929813.39425614.1596008.2778822.050609721.92031028.892506226.34905811.00675121.31587315.38375215개수16.00000018.00000022.00000013.00000024.00000022.0000003.0000002.00000002.00000001.000000015.0000008.00000017.00000018.000000평균104.26250058.88333366.11363661.77692368.09166756.90000072.56666761.400000069.200000050.400000074.46000057.38750063.67058855.477778표준편차173.48905011.44784915.82542511.74791914.0524467.0430658.39305319.65756850.141421417.23069512.21853812.5001388.65893316개수15.00000014.00000032.00000024.00000023.00000021.0000004.0000002.00000007.00000003.000000016.0000007.00000011.00000019.000000평균66.78666756.20714373.22187557.67500065.82173958.65238160.87500056.750000076.314285762.133333366.16875055.57142967.37272754.394737표준편차9.5493368.16780413.5228067.2539799.86315312.1059334.6800115.16187959.473547111.64230799.4406029.2247349.2523616.11750417개수11.00000015.00000026.00000019.00000030.00000017.0000005.0000003.000000010.00000006.000000011.0000008.00000017.00000014.000000평균77.20909162.96666767.40000055.25263271.20666761.22352971.56000056.700000086.480000055.250000070.89090961.36250072.18823557.064286표준편차9.33321513.19348712.20688313.88649921.51012516.32967110.26001913.346160525.39461014.402158613.50129314.41397511.79718615.33490818개수11.0000006.00000014.0000007.0000005.0000005.0000004.0000002.00000006.00000003.000000014.00000011.00000015.00000012.000000평균67.73636461.91666773.68571458.01428676.06000063.88000076.50000054.300000080.533333355.533333381.91428656.30909171.98000051.760000표준편차14.40557316.52179416.8770159.31386622.12584510.7429988.8690474.384062018.39887686.504101314.4487888.55984315.7963477.470178\n\n\n코드\nmytable3 &lt;- table_function_general(tab3, 2)\nmytable3 \n\n\nITEMTEST2017201820192020202120222023SEXAGE개수평균표준편차개수평균표준편차개수평균표준편차개수평균표준편차개수평균표준편차개수평균표준편차개수평균표준편차ITEM_F001남성1316162.350007.44893720164.715006.89532826164.892318.6390241182.800002159.400006.22253973165.266672.66333111165.609099.1773041416165.456255.39987317168.505885.31806732167.603136.5675393169.433334.30967902170.6000011.45512997171.7142911.31715918168.388897.0856021516269.78125397.69221322170.977276.55205824173.600005.3625923170.900004.62276972169.700006.646803715173.380004.94790017174.188247.1050051615173.200007.15691532173.031254.47642123173.539136.4867514170.825006.43913817175.342862.869295616174.031255.88848811171.581825.5689891711175.000004.85097926173.450004.88837430173.573336.2672625174.260004.496443010173.140006.764153911174.981823.13681917174.352948.4084121811174.527275.83319714174.628575.8440545171.580003.8343194169.325003.71875886176.533332.445949014176.557145.85277215171.246676.460856여성1317157.288247.66321411156.290915.82605416156.493753.4231502158.900004.94974755157.360001.906043010160.370004.90329813159.553858.7047511413159.900007.35572316159.350004.66504715161.040004.5298692155.600007.77817464158.325005.30809138161.875004.9873418158.962506.8571001518162.316675.81835313162.400006.85845022160.622735.1146782159.950003.18198051162.000008160.700003.70675118160.383333.8730211614159.314295.43915424160.920835.05009521159.680955.9563092158.650000.49497473165.066670.85049017159.142867.62842419161.436844.3448831715160.960004.03676019161.984213.48110217159.347066.1974913161.000001.56204996158.733333.74948898162.437504.95521014162.385715.063574186161.150006.3380607160.471436.2739455163.080004.9302132164.500005.65685423156.200003.593048811162.872737.07277812160.391678.397668ITEM_F002남성131656.9437515.8842892064.2650015.5455622663.7307716.570716197.50000272.8500036.4159992360.933339.1544161164.4181820.188453141659.1312511.6590861763.0764714.8480863262.9687513.394256363.066678.2778822291.0000021.9203102772.9571426.3490581863.5055621.3158731516104.26250173.4890502266.1136415.8254252468.0916714.052446372.566678.3930527269.200000.14142141574.4600017.2306951763.6705912.500138161566.786679.5493363273.2218713.5228062365.821749.863153460.875004.6800107776.314299.47354711666.168759.4406021167.372739.252361171177.209099.3332152667.4000012.2068833071.2066721.510125571.5600010.26001951086.4800025.39461011170.8909113.5012931772.1882411.797186181167.7363614.4055731473.6857116.877015576.0600022.125845476.500008.8690473680.5333318.39887681481.9142914.4487881571.9800015.796347여성131752.7352913.0564131151.0272712.5464811649.350007.319381253.000004.2426407550.380006.37628421059.6300015.1688311355.6384615.079597141353.6384616.5859651652.637505.8892981558.5000014.159600262.650002.0506097458.050008.8925062857.4500011.006751855.6625015.383752151858.8833311.4478491361.7769211.7479192256.900007.043065261.4000019.6575685150.40000857.3875012.2185381855.477788.658933161456.207148.1678042457.675007.2539792158.6523812.105933256.750005.1618795362.1333311.6423079755.571439.2247341954.394746.117504171562.9666713.1934871955.2526313.8864991761.2235316.329671356.7000013.3461605655.250004.4021586861.3625014.4139751457.0642915.33490818661.9166716.521794758.014299.313866563.8800010.742998254.300004.3840620355.533336.50410131156.309098.5598431251.760007.470178",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>통계표 출판</span>"
    ]
  },
  {
    "objectID": "docs/chapter-03.html#아래한글hwp로-내보내기",
    "href": "docs/chapter-03.html#아래한글hwp로-내보내기",
    "title": "4  통계표 출판",
    "section": "4.3 아래한글(HWP)로 내보내기",
    "text": "4.3 아래한글(HWP)로 내보내기\n이제 flextable로 출력한 표를 아래한글로 내보내는 과정을 확인해보자.\n아래한글은 우리나라에서만 쓰이는 문서프로그램이기에 flextable에서 직접 아래한글로 표를 내보내는 것은 없다.\n그렇기에 워드(WORD)로 내보낸 표를 아래한글로 가져오면 된다.\n가장 간단한 방법으로 워드로 내보낸 표를 복사 붙여넣기를 통해 아래한글로 내보낼 수 있다.\nmytable1를 워드(WORD)로 내보내는 코드는 다음과 같다.\n# 새로운 Word 문서 객체 생성\nmy_doc &lt;- read_docx()\n\n# 본문(body)에 flextable 삽입\nmy_doc &lt;- body_add_flextable(my_doc, mytable1)\n\n# docx 파일로 내보내기\nprint(my_doc, target = \"my_flextable.docx\")\n코드를 실행한 다음 R작업폴더에 들어가 보면 내가 지정한 my_flextable.docx파일이 생긴것을 알수 있다.\n\n파일에 들어가보면 flextable로 만든 표가 있는 것을 확인 할수 있다.\n\n그리고 이 표를 복사해서 아래한글에 붙여넣기를 하면 아래한글로 표를 옮길수 있다.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>통계표 출판</span>"
    ]
  },
  {
    "objectID": "docs/appendix.html",
    "href": "docs/appendix.html",
    "title": "5  부록",
    "section": "",
    "text": "5.1 flextable 을 이용한 아래 한글 테이블 작성 요약\n데이터가 요약된 결과를 flextable을 활용하여 한글(HWP) 문서로 출력하는 방법은 다음과 같이 세 단계로 이루어진다.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>부록</span>"
    ]
  },
  {
    "objectID": "docs/appendix.html#sec-app-hwp",
    "href": "docs/appendix.html#sec-app-hwp",
    "title": "5  부록",
    "section": "",
    "text": "1. R에서 원하는 통계표 생성\n먼저, R을 이용하여 원하는 통계 결과표를 만든다. 예를 들어, mtcars 데이터셋을 요약하여 표로 정리할 수 있다.\n\n\n코드\nlibrary(dplyr)\nlibrary(flextable)\n\n# 데이터 요약\nsummary_table &lt;- mtcars %&gt;%\n  group_by(cyl) %&gt;%\n  summarise(\n    avg_mpg = mean(mpg),\n    avg_hp = mean(hp),\n    count = n()\n  )\n\n# `flextable`을 이용하여 보기 좋은 표로 변환\ntable_output &lt;- flextable(summary_table)\n\n# 기본 스타일 적용\ntable_output &lt;- table_output %&gt;%\n  theme_vanilla() %&gt;%\n  autofit()\n\ntable_output\n\n\ncylavg_mpgavg_hpcount426.6636482.6363611619.74286122.285717815.10000209.2142914\n\n\n\n\n2. MS Word 문서로 저장\n한글 문서(.hwp)로 바로 저장하는 기능은 지원되지 않지만, 우선 MS Word(.docx) 파일로 저장한 후, 한글 문서로 변환하는 방식을 사용하면 된다.\n\n\n코드\nlibrary(officer)\n\n# Word 파일로 저장\ndoc &lt;- read_docx() %&gt;%\n  body_add_flextable(table_output) %&gt;%\n  body_add_par(\"통계표 예시\", style = \"heading 1\")\n\nprint(doc, target = here(\"outputs\", \"statistics_table_by_flextable.docx\"))\n\n\n이렇게 생성된 statistics_table.docx 파일은 MS Word에서 열어볼 수 있으며, 이후 한글 파일로 변환하여 저장할 수 있다.\n\n\n\n3. 한글(HWP) 파일로 변환\n한컴 오피스에서 statistics_table.docx 파일을 열고 한글(HWP) 문서 형식인 .hwp 로 선택하여 저장한다.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>부록</span>"
    ]
  },
  {
    "objectID": "docs/appendix.html#sec-app-packages",
    "href": "docs/appendix.html#sec-app-packages",
    "title": "5  부록",
    "section": "5.2 요약 테이블을 만드는 R 패키지 비교",
    "text": "5.2 요약 테이블을 만드는 R 패키지 비교\nflextable을 사용하여 통계표를 생성하고 Word(.docx)로 저장하는 작업을 gtsummary와 arsenal 패키지를 사용하여 동일하게 수행하는 방법을 소개한다.\n이 두 패키지는 의학 및 연구 분야에서 통계표를 손쉽게 생성하는 데 매우 유용하며, 특히 그룹별 기술 통계 및 비교 분석 결과를 깔끔한 형식으로 제공하는 장점이 있다.\n하지만 flextable 보다 테이블을 다양하게 출력할 수 있는 선택사항과 유연성이 부족하다. 3개의 패키지의 특징을 다음 표와 같이 요약할 수 있다.\n\n\n\n표 5.1: 테이블 작성 패키지의 비교\n\n\n\n\n\n\n\n\n\n\n패키지\n주요 기능\n특징\n\n\n\n\nflextable\n데이터프레임을 표로 변환\n다양한 스타일 지정 가능, 보고서용 고품질 테이블 제작\n\n\ngtsummary\n그룹별 기술 통계\n평균, 표준편차, 중앙값 등 자동 계산, 깔끔한 보고서 스타일\n\n\narsenal\n그룹 간 비교 및 통계 검정\nt-검정, 카이제곱 검정 포함, 연구 분석에 적합\n\n\n\n\n\n\n\ngtsummary 패키지를 사용한 통계표 생성\ngtsummary는 그룹별 기술 통계를 자동으로 요약해 주는 패키지로, 특히 회귀 분석 결과와 그룹별 비교 통계를 자동으로 생성하는 기능이 강력하다.\n다음은 tbl_summary 람수를 이용하요 mtcars 데이터에 대한 요약 테이블을 생성하는 과정이다.\n\n\n코드\nlibrary(gtsummary)\n\n# 그룹별 요약 통계 생성\nsummary_table_gtsummary &lt;- mtcars %&gt;%\n  select(cyl, mpg, hp) %&gt;%  # 필요한 변수 선택\n  tbl_summary(by = cyl,  # 그룹 변수 (cyl: 실린더 수)\n              statistic = list(all_continuous() ~ \"{mean} ({sd})\"),  # 평균과 표준편차 표시\n              missing = \"no\") %&gt;%  # 결측값 처리\n  modify_header(label = \"변수\") %&gt;%  # 헤더 수정\n  bold_labels()  # 변수명을 굵게 표시\n\n# 출력\nsummary_table_gtsummary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n변수\n4 N = 111\n6 N = 71\n8 N = 141\n\n\n\n\nmpg\n26.7 (4.5)\n19.7 (1.5)\n15.1 (2.6)\n\n\nhp\n83 (21)\n122 (24)\n209 (51)\n\n\n\n1 Mean (SD)\n\n\n\n\n\n\n\n\n위 코드는 mtcars 데이터셋에서 cyl(실린더 수)별로 mpg(연비)와 hp(마력)의 평균과 표준편차를 요약하여 테이블을 생성한다.\n다음으로 gtsummary를 활용하여 Word(docx) 파일로 저장할 수 있다.\n\n\n코드\nlibrary(officer)\n\n# Word 문서 생성 및 저장\nsummary_table_gtsummary %&gt;%\n  as_flex_table() %&gt;%\n  flextable::save_as_docx(path = here::here(\"outputs\",  \"statistics_table_by_gtsummary.docx\"))\n\n\n이제 gtsummary_statistics_table.docx 파일이 생성되며, MS Word에서 열어볼 수 있다.\n\n\narsenal 패키지를 활용한 그룹 비교 분석 테이블 생성\narsenal 패키지는 그룹 간 기술 통계를 자동으로 생성하고, 두 그룹을 비교하는 통계 검정을 함께 제공하는 기능을 갖추고 있다.\n다음은 tableby()를 활용하여 그룹을 비교 분석하는 프로그램이다.\n\n코드\nlibrary(arsenal)\n\n# 그룹 비교 분석 (실린더 수에 따른 mpg, hp 차이 검정)\nsummary_table_arsenal &lt;- tableby(\n  cyl ~ mpg + hp,  # 그룹 변수: cyl, 비교할 변수: mpg, hp\n  data = mtcars\n)\n\n# 요약 결과 출력\nsummary(summary_table_arsenal)\n\n\n\n\n\n\n\n\n\n\n\n\n\n4 (N=11)\n6 (N=7)\n8 (N=14)\nTotal (N=32)\np value\n\n\n\n\nmpg\n\n\n\n\n&lt; 0.001\n\n\n   Mean (SD)\n26.664 (4.510)\n19.743 (1.454)\n15.100 (2.560)\n20.091 (6.027)\n\n\n\n   Range\n21.400 - 33.900\n17.800 - 21.400\n10.400 - 19.200\n10.400 - 33.900\n\n\n\nhp\n\n\n\n\n&lt; 0.001\n\n\n   Mean (SD)\n82.636 (20.935)\n122.286 (24.260)\n209.214 (50.977)\n146.688 (68.563)\n\n\n\n   Range\n52.000 - 113.000\n105.000 - 175.000\n150.000 - 335.000\n52.000 - 335.000\n\n\n\n\n위 코드는 cyl(실린더 수)에 따라 mpg(연비)와 hp(마력)의 기술 통계 및 그룹 간 차이에 대한 통계적 검정 결과를 제공한다.\n다음은 arsenal의 분석 결과를 Word(docx) 파일로 저장하는 과정이다.\n\n\n코드\n# Word 문서로 저장\nwrite2word(summary_table_arsenal, file =here::here(\"outputs\", \"statistics_table_by_arsenal.docx\"))\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |......................................................................| 100%\n                                                                                          \n\n\n/Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64/pandoc +RTS -K512m -RTS statistics_table_by_arsenal.docx.knit.md --to docx --from markdown+autolink_bare_uris+tex_math_single_backslash --output /Users/ylee19067/Library/CloudStorage/Dropbox/project/teaching/for_company/reporttable/outputs/statistics_table_by_arsenal.docx --lua-filter /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rmarkdown/rmarkdown/lua/pagebreak.lua --highlight-style tango",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>부록</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Allaire, J. J., Charles Teague, Carlos Scheidegger, Yihui Xie,\nChristophe Dervieux, and Gordon Woodhull. 2024.\n“Quarto.” https://doi.org/10.5281/zenodo.5960048.",
    "crumbs": [
      "References"
    ]
  }
]