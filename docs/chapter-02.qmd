# 데이터 요약표 작성의 기초 {#sec-datatable}

```{r}
#| echo: false
#| message: false
#| warning: false

library(here)
source(here::here("_common", "_common.R"))
```


### 서론 

데이터 분석 과정에서 가장 중요한 단계 중 하나는 자료를 요약하고, 통계적으로 의미 있는 형태로 정리하는 것이다. 원시 데이터(raw data)는 보통 복잡하고 정리가 필요한 경우가 많으며, 이를 효율적으로 정리하지 않으면 분석의 방향을 설정하는 것이 어려워질 수 있다. 이러한 과정에서 R의 대표적인 데이터 처리 패키지인 `dplyr`과 `tidyr`이 강력한 도구로 활용된다.  


`dplyr`은 데이터 프레임을 다룰 때 가장 널리 사용되는 패키지로, 직관적인 문법과 강력한 기능을 제공한다. 특히, 데이터를 요약하고 통계 테이블을 생성하는 과정에서 코드의 가독성(tidy evaluation)을 높이고 실행 속도를 최적화할 수 있다는 점에서 유용하다. 특히, 연속적인 데이터 변환에서 `%>%`(pipe 연산자)를 활용하면 여러 연산을 논리적으로 연결하여 가독성을 높일 수 있다.  

 
통계 테이블을 만들 때 데이터는 종종 정리되지 않은 형태(untidy data)로 존재하며, 분석을 위해 올바른 형태로 변환해야 하는 경우가 많다. `tidyr` 패키지는 이러한 데이터 정리 과정에서 필수적인 역할을 한다.  `tidyr`을 사용하면 넓은 형식(Wide format)과 긴 형식(Long format)의 자료로  상호 변환이 가능하다. 또한 결측값 및 불완전한 데이터 정리하는데 유용하게 사용된다.  

대부분의 데이터 정리는 **요약(summarization)**과 **변환(transformation)**이 함께 이루어진다. `dplyr`과 `tidyr`은 각각의 역할을 수행하며, 함께 사용하면 더욱 강력한 데이터 처리 능력을 발휘할 수 있다.  


| 단계 | 기능 | 주요 함수 |  
|------|------|---------|  
| 데이터 요약 | 그룹별 통계 계산 | `group_by()`, `summarise()` |  
| 데이터 변환 | 넓은 형식 ↔ 긴 형식 변환 | `pivot_wider()`, `pivot_longer()` |  
| 결측값 처리 | 누락된 값 제거 또는 대체 | `drop_na()`, `replace_na()` |  
| 변수 정리 | 새로운 변수 생성 또는 선택 | `mutate()`, `select()` |  
: `dplyr`과 `tidyr` 의 주요함수와 그 기능 {#tbl-package-func}

이처럼 `dplyr`은 데이터를 요약하고 통계를 생성하는 역할을 하며, `tidyr`은 정리되지 않은 데이터를 보다 분석하기 쉬운 형태로 변환하는 역할을 한다.  따라서, 통계 테이블을 만들거나 데이터를 정리하는 모든 과정에서 `dplyr`과 `tidyr`은 필수적인 도구**이며, 이를 활용하면 데이터 분석의 효율성과 신뢰성을 크게 향상시킬 수 있다.

## 데이터의 요약 

이 절에서는 요약통계량을 도출하거나 보고서로 올리기위해 자료를 요약하여 정리하는 방법을 보이고자 한다. 

먼저, 함수들을 설명하기 위한 간단한 데이터프레임을 만들어본다.

```{r}
#| label: tbl-table-ex-data
#| tbl-cap: 예제 데이터프레임
#| warning: false
#| message: false

df <- data.frame(
  이름 = c("홍길동", "김영희", "박찬호", "이소라", "최민식"),
  도시 = c("서울", "부산", "서울", "인천", "부산"),
  나이 = c(25, 30, 35, 40, 28),
  점수 = c(80, 90, 75, 82, 95)
)

knitr::kable(df)
```

### 그릅의 지정: `group_by()`

- 특정 열(또는 여러 열)을 기준으로 행들을 묶어 그룹한다.

- 그룹화 후에는 요약`summarize()`, 변환`mutate()`, 혹은 재구조화`reframe()` 등의 작업을 그룹 단위로 수행할 수 있다.

```{r}
#| label: table-groupby
#| warning: false
#| message: false
#| 
df_grouped <- df %>%
  group_by(도시)

df_grouped
```

- 결과물을 보면 눈에 보이는 데이터는 바뀌지 않지만, 내부적으로 도시를 기준으로 데이터가 '그룹화'된 상태가 된다. 이후에 `summarize()`, `reframe()` 등을 하면 "도시별"로 계산한다.

### 자료의 요약: `summarize()` 또는 `summarise()`


- 평균, 합계, 개수 등의 통계를 구할 때 자주 사용한다. 한 번에 여러 요약 통계를 낼 수도 있다.

- 도시별로 평균 나이와 평균 점수를 구해보자.

  - `mean(나이)`: 각 도시 그룹 내 `나이`의 평균
  - `mean(점수)`: 각 도시 그룹 내 `점수`의 평균
  - `n()`: 그룹 내 행(row)의 개수(인원수)를 세어줌

```{r}
#| label: table-summ
#| warning: false
#| message: false
#| 

df %>%
  group_by(도시) %>%
  summarize(
    `평균나이` = mean(`나이`),
    `평균점수` = mean(`점수`),
    `인원수`   = n()
  )
```

::: {.callout-note}

### 데이터프레임의 컬럼명

`dplyr`과 `tidyr` 제공되는 함수들은 간결한 연산([tidy evaluation](https://dplyr.tidyverse.org/articles/programming.html))의 방식이 적용되어 데이터프레임의 컬럼 이름을 나타낼 때 영문과 한글 상관없이 따옴표를 붙이지 않고 없이 사용할 수 있다. 하지만  컬럼명을 한글로 사용하는 경우 간결한 연산이 적용되지 않는 다른 패키지의 함수와 같이 사용하는 경우 문제가 발생할 수 있다.

따라서 한글 컬럼 이름은 언제나 역따옴표 `` 로 묶어주는 것이 안전하다.
:::


### 컬럼의 위치 이동:  `relocate()`

- 열(column)의 순서를 재배치한다.
  - `.before`: 어떤 열의 앞에 지정한 열들을 옮길지 설정 (또는 `.after`도 있음)
  - `.before = 이름`: 기존의 `이름` 열 앞에 `도시` 열을 위치시키라는 의미

- 데이터를 보기 편하게 만들거나, 특정 열을 맨 앞으로 가져올 때 유용하다.

- 예제 자료에서 도시 열을 맨 앞으로 가져오기

```{r}
#| label: table-relo
#| warning: false
#| message: false

df_relocated <- df %>%
  relocate(도시, .before = 이름)

df_relocated
```


### 컬럼의 선택: `select()`

- 원하는 열만 선택하거나, 열의 순서를 지정하는 데 사용한다.
- 데이터에서 특정 열만 추출하거나, 불필요한 열을 제거하고 싶을 때 사용한다.
- 다음 예시는 이름과 점수 열만 선택

```{r}
#| label: table-sele
#| warning: false
#| message: false

df_selected <- df %>%
  select(이름, 점수)

df_selected
```

### 재구조화: `reframe()`

- `summarize()`와 비슷하게 그룹화된 데이터를 재구조화하되, 결과를 그룹별 여러 행으로 반환할 수도 있다.

- dplyr 1.1.0부터 추가된 기능으로, 기존 `summarize()`가 그룹당 "요약된 한 행"을 반환했던 것과 달리, `reframe()`은 그룹별로 여러 행을 만들어낼 수 있다.

- 다음 예시는 도시별로 데이터를 모은 뒤, 그 안에서 '이름'과 '점수'만 추려서 재구조화

```{r}
#| label: table-refr
#| warning: false
#| message: false

df_reframed <- df %>%
  group_by(도시) %>%
  reframe(
    이름,
    점수,
    평균도시점수 = mean(점수)
  )

df_reframed
```

- `도시`별로 그룹화한 뒤 각 그룹 내부에서 모든 이름과 점수를 그대로 나열하면서, 같은 그룹 내 평균 점수(`평균도시점수`)를 함께 표시한다.

- 결과는 그룹당 여러 행(그룹에 속한 사람 수만큼)이 나올 수 있으며, 요약 통계는 반복되어 표시한다.


### 컬럼명 변경 `rename()` 또는 `rename_with`

- 특정 규칙에 따라 여러 열의 이름을 한꺼번에 변경할 때 사용한다.

- 예를 들어, 모든 열 이름에 접두사(prefix)를 붙이거나, 대소문자 변환 등을 할 수 있다.

```{r}
#| label: table-rena1
#| warning: false
#| message: false

df_renamed1 <- df %>%
  rename(city = 도시, name = 이름)

df_renamed1
```




- 다음 예시는 모든 열 이름에 "new_"라는 접두사를 붙인다.

  - `.fn`: 열 이름을 어떻게 변환할지 정의한 함수

  - `.cols`: 변환할 열의 범위 지정(예: 특정 열, `everything()`)


```{r}
#| label: table-rena2
#| warning: false
#| message: false

df_renamed2 <- df %>%
  rename_with(.fn = ~ paste0("new_", .), .cols = everything())

df_renamed2
```



###  정열: `arrange()`

- 원하는 열을 기준으로 행을 정렬한다. 오름차순/내림차순 모두 가능.

- 내림차순 정렬 시에는 `desc()`를 사용.

- 다음 예시는 점수 순서대로 오름차순 정렬

```{r}
#| label: table-arra
#| warning: false
#| message: false

df_arranged <- df %>%
  arrange(점수)

df_arranged
```

- `arrange(점수)`: 점수가 낮은 순서에서 높은 순서로 정렬

- 만약 높은 순서부터 정렬을 원한다면 `arrange(desc(점수))`


###  행의 선택: `filter()`

- 주어진 조건에 따라서 행들을 선택할 수 있다.

- 다음 예시는 나이가 30세 이상인 관측단위만 선택 

```{r}
#| label: table-filt
#| warning: false
#| message: false

df_filtered <- df %>%
  filter(나이 >= 30)

df_filtered
```

- `arrange(점수)`: 점수가 낮은 순서에서 높은 순서로 정렬

- 만약 높은 순서부터 정렬을 원한다면 `arrange(desc(점수))`


### 컬럼 묶기  `across()`

- 여러 열에 대해 동일한 함수를 일괄 적용할 때 사용한다.

- `mutate()`, `summarize()` 등에서, 선택한 여러 열에 대해 한꺼번에 연산을 적용할 수 있다.

- 다음 예시는 나이와 점수를 각각 2배로 만들고, 새로운 열(나이2배, 점수2배)을 생성

```{r}
#| label: table-acro
#| warning: false
#| message: false
#| 
df_across <- df %>%
  mutate(
    across(
      .cols = c(나이, 점수),       # 어떤 열에 적용할지
      .fns  = ~ . * 2,            # 어떤 함수를 적용할지
      .names = "{.col}2배"        # 새로운 열 이름 형식
    )
  )

df_across
```

- `.cols`: 변환 적용 대상 열 지정

- `.fns`: 적용할 함수

- `.names`: 새 열 이름 패턴 정의 (`"{.col}"`, `"{.col}_새이름"` 등)


## 데이터의 변환


데이터프레임의 형태를 바꾸는 중요한 함수 2개를 소개한다.

###  긴 형식: `pivot_longer()`

- 가로 방향으로 나열된 데이터를 세로 방향(긴 형태, Long format)로 변환한다.

```{r}
#| label: fig-tablelonger
#| fig-cap: "긴 형식으로 변환 (그림출처: `tidyr` 홈페이지)"
#| out-width: "70%"
knitr::include_graphics(here::here("images", "longer.png"))
```
                        


- 보통 측정 항목(예: 나이, 점수)이 열로 되어 있을 때, 이를 "변수 이름"과 "값"의 두 열로 합쳐서 “길게”(long) 만들 때 쓰인다.

- 다음 예시는 `나이`와 `점수` 열을 세로 방향으로 길게 변환

```{r}
#| label: table-long
#| warning: false
#| message: false
#| 
df_long <- df %>%
  pivot_longer(
    cols      = c(나이, 점수),
    names_to  = "측정항목",
    values_to = "값"
  )

df_long
```

- `cols`: 세로로 변환할(길게 만들) 대상 열을 지정

- `names_to`: 기존 열 이름이 어떤 새 열 이름으로 저장될지 지정

- `values_to`: 기존 열 값이 어떤 새 열 이름으로 저장될지 지정


###  넓은 형식: `pivot_wider()`

- 세로 방향(긴 형태)로 나열된 데이터를 가로 방향(넓은 형태)으로 변환한다.


```{r}
#| label: fig-tablewider
#| fig-cap: "넓은 형식으로 변환 (그림출처: `tidyr` 홈페이지)"
#| out-width: "70%"
knitr::include_graphics(here::here("images", "wider.png"))
```

- 일반적으로 `pivot_longer()`로 만들었던 긴 데이터 프레임을 다시 열별로 펼칠 때 사용한다.

- 다음 예시는 `pivot_longer()` 결과물(df_long)을 다시 넓은 형식으로 변환

```{r}
#| label: table-wide
#| warning: false
#| message: false
#| 

df_wide <- df_long %>%
  pivot_wider(
    names_from  = "측정항목",
    values_from = "값"
  )

df_wide
```

- `names_from`: 어떤 열의 값을 "열 이름"으로 펼칠지 지정

- `values_from`: 어떤 열의 값을 "열 값"으로 사용할지 지정

- 다시 `이름`, `도시`를 그대로 두면서, `나이`와 `점수`가 각각 열로 복원된 형태가 된다.




## 실습: 데이터요약표 만들기

이제 실제 데이터를 이용하여 분할표와 요약통계표를 구해보자.

```{r} 
#| label: table-pract-data
#| warning: FALSE
#| message: FALSE

load(here::here("data", "physical100_data.RData"))
ls()
```    

###  소개

- 2018-2023년 국민체력100사업에서 측정한 초등학교 체력측정 자료

- 실습을 위하여 1000명 임의로 추출한 자료

- 이 실습에서 통계표를 작성하는 원천 자료(raw data; source data)로 이용

```{r}
head(df1_youth, 10)
```


### 요약통계표 

- `df1_youth`에서 성별과 각 년도별로 그룹화 해서 도수,평균 등을 계산.

코드에 대해 설명하면,

1. 원천자료 `df1_youth` 를 지정하고
2. `TEST_SEX`, `TEST_YEAR`, `ITEM_F001` 컬럼을 선택하고
3. `TEST_SEX`, `TEST_YEAR` 컬럼으로 그룹화한 후
4. 신장(`ITEM_F001`) 에 대한 그룹별 돗수, 평균, 표준편차를 계산

```{r}
basic_stat_table <- df1_youth %>%
  select(TEST_SEX, TEST_YEAR, ITEM_F001) %>%
  group_by(TEST_SEX, TEST_YEAR) %>%
  summarize(n = n(), MEAN =mean(ITEM_F001, na.rm= TRUE ),
            SD =sd(ITEM_F001, na.rm= TRUE ),
            .groups = "drop"  # 그룹을 모두 해제
            )
basic_stat_table
```


### 분할표 

남여별로 각 년도에 돗수를 분할표로 구해본다. 

1. 원천자료 `df1_youth` 를 지정하고
2. `TEST_SEX`, `TEST_YEAR` 컬럼을 선택하고
3. `TEST_SEX`, `TEST_YEAR` 컬럼으로 그룹화한 후
4. 각 그룹의 조합의 돗수를 n 으로 계산한다.
5. 측정연도 `TEST_YEAR` 의 숫자 앞에 `Y` 를 붙여서 새로운 열이름을 만들고, 성별과 연도에 해당하는 돗수로 교차표를 만든다.

```{r}
cross_stat_table <- df1_youth %>%
  select(TEST_SEX, TEST_YEAR) %>%
  group_by(TEST_SEX, TEST_YEAR) %>%
  summarize(n = n()) %>%
  pivot_wider(names_from = TEST_YEAR,
              values_from = n, names_prefix = "Y" )
cross_stat_table
```

### 통계표 만들기

통계표를 만드는 방법을 여러가지 보일 것이다.

우선 통계량을 구하는 함수를 코드에 일일히 입력하기 번거로우니 여러 개의 지정된 함수와 이름을 `list`로 묶어서 `my_summ_func`에 저장하는 방법을 사용한다.

각 측정항목에 적용할 통계 함수와 출력값의 이름을 지정한다.

```{r}
my_summ_func <- list(
  개수 = ~sum(!is.na(.x)),
  결측개수 = ~sum(is.na(.x)),
  평균 = ~mean(.x, na.rm = TRUE),
  표준편차 = ~sd(.x, na.rm = TRUE),
  최소값 = ~min(.x, na.rm = TRUE),
  백분위25 = ~quantile(.x, probs = 0.25, na.rm = TRUE),
  중앙값 = ~median(.x, na.rm = TRUE),
  백분위75 = ~quantile(.x, probs = 0.75, na.rm = TRUE),
  최대값 = ~max(.x, na.rm = TRUE)
)
```

- `~sum`,`~mean`, 등등: 함수를 쓸때 간단하게 작성하는 방법

- `.x`: 자리표시자로써 열 또는 원소를 지칭하는 의미

- `na.rm`: 결측치(NA)를 제거하고 계산할지 여부를 물어보는 것

1.  1단계 통계표

간단한 통계표부터 보여본다.

- 원천자료 `df1_youth`를 지정하고
- `TEST_SEX`, `TEST_YEAR` 컬럼을 선택하고
- `my_summ_func` 에서 정의한 함수를 열이름이 `ITEM`을 포함한 모든열에 적용한다.

```{r}
aa <- df1_youth %>% 
  group_by(TEST_SEX, TEST_YEAR) %>%
  summarise(across(contains("ITEM"), my_summ_func,
                   .names = "{.col}-{.fn}"))
aa
```


2. 2단계 통계표

1단계 통계표에서 `pivot_longer`을 사용해 추가적으로 진행을 해본다.

- 항목이름과 통계이름으로 구성된 얿은 열을 가진 자료를 다시 긴 행을 가진 자료로 변환
- 변환시 열이름을 두 열로 나누어 저장(항목이름 `item`과 통계량 `stat`)
- 항목이름 `item`열을 앞으로 배치 

```{r}
bb <- aa %>% pivot_longer(!c(TEST_SEX, TEST_YEAR), names_to = c("item", "stat"), names_sep="-" , values_to = "value")
bb
```


3. 3단계 통계표 

2단계 통계표에서 `pivot_wider`을 진행해 추가적으로 진행을 해본다.

- 긴 행을 가진 자료를 측정 년도를 열로 바꾸어 긴 열을 가진 자료로 변환
- 항목이름과 성별순으로 자료를 정렬

```{r}
cc <- bb %>% dplyr::relocate(item) %>% pivot_wider(names_from = TEST_YEAR, values_from = value)
cc
```


### 함수만들기 

실제로 통계표를 만들고 출력하는 데까지 한번에 하는 것이 아닌 여러번의 과정을 거쳐야 한다는 것을 알고 있다.

그렇기에 여러번 돌릴 때마다 코드를 수정하면서 돌리는 것은 비효율적이므로 함수를 만들어서 필요할 때 마다 간편하게 통계표를 만드는 과정을 보려고 한다.

우선, `summarise`에 쓰일 통계량이 많기에 리스트 형태로 미리 지정하는 것이 편하다.

```{r}
my_summ_func <- list(
  `개수` = ~sum(!is.na(.x)),
  `결측개수` = ~sum(is.na(.x)),
  `평균` = ~mean(.x, na.rm = TRUE),
  `표준편차` = ~sd(.x, na.rm = TRUE),
  `최소값` = ~min(.x, na.rm = TRUE),
  `백분위25` = ~quantile(.x, probs = 0.25, na.rm = TRUE),
  `중앙값` = ~median(.x, na.rm = TRUE),
  `백분위75` = ~quantile(.x, probs = 0.75, na.rm = TRUE),
  `최대값` = ~max(.x, na.rm = TRUE)
)

my_summ_func_2 <- list(
  `개수` = ~n(),
  `평균` = ~mean(.x, na.rm = TRUE),
  `표준편차` = ~sd(.x, na.rm = TRUE)
)
```


이제 직접 함수를 만들고 이해해보자.

```{r}
summ_function_general <- function(df, cols_to_row, cols_to_col, cols_to_summ, stat_fun, stat_to_column = FALSE) {
  
  col1 <- syms(cols_to_row)
  col2 <- syms(cols_to_col)
  col3 <- syms(cols_to_summ)
  
  tab1 <- df %>%     
    group_by(!!!col1, !!!col2) %>%  
    summarise(across(all_of(cols_to_summ), stat_fun, 
                     .names = "{.col}-{.fn}")) %>%
    pivot_longer(cols = -c(!!!col1, !!!col2), 
                 names_to = c("ITEM", "STAT"),  
                 names_sep="-" , values_to = "value")  %>%   
    relocate(ITEM) %>% 
    dplyr::arrange(ITEM) %>%
    dplyr::ungroup() 
  
  if (stat_to_column) { 
    tab1 <- tab1  %>% pivot_wider(names_from = all_of(c(cols_to_col,"STAT")), values_from = value)  
  }
  else {
    tab1 <- tab1 %>% pivot_wider(names_from = all_of(cols_to_col), values_from = value)  
  }
    
   return(tab1)
}  
```

우선, 입력할 인자들이 무엇인지 확인하자.

```{r}
#| eval: false
function(df, #  데이터프레임 입력
         cols_to_row,  # "행 그룹”으로 사용할 열 이름(들).
         cols_to_col,  # “열 그룹”으로 사용할 열 이름(들).
         cols_to_summ, # 요약 함수(stat_fun)를 적용할 대상 열 이름(들).
         stat_fun,     # 요약에 사용할 함수(예: mean, sum, sd 등).
         stat_to_column = FALSE # 결과를 펼칠 때(pivot_wider) 통계값(STAT)을 열 이름으로 포함할지 여부
         )
```

1. `syms`

- 문자열 벡터를 symbol 리스트로 바꿔준다.

- 예를 들어 `cols_to_row = c("SEX","YEAR")`라면 `col1`은 `list(quote(SEX), quote(YEAR))`가 된다.

- 이후 `!!!`(splicing operator)와 함께 `group_by()` 등에 활용하기 위함이다.

```{r}
#| eval: false

  col1 <- syms(cols_to_row)
  col2 <- syms(cols_to_col)
  col3 <- syms(cols_to_summ)
```

2. `!!!`

- `!!!` 연산자를 쓰는 이유는, 직접함수를 만들 때 필요한 것으로 입력한 인자를 잘 인식시키기 위한 과정이라 생각하면 된다.

- `syms()`로 만들어진 다수의 symbol 리스트를 `group_by()`나 `pivot_longer()` 등의 인자에 ‘개별 인자’처럼 인식해준다.

```{r}
#| eval: false

tab1 <- df %>% group_by(!!!col1, !!!col2)
```

즉, `!!!col1` 은 “col1이 가진 모든 symbol을 풀어서 인자로 넣어달라”라는 뜻이다. 

예를 들어 `col1`이 `list(quote(SEX)`, `quote(YEAR))`라면, `group_by(!!!col1)`는 `group_by(SEX, YEAR)`로 동작하게 된다.

3. `summarise(across...`

- 각 그룹별로 `cols_to_summ`에 지정된 열에 대해, `stat_fun`을 적용해 요약한다.

- 결과 열 이름은 `"{.col}-{.fn}"` 형태로 설정된다.

```{r}
#| eval: false

summarise(across(all_of(cols_to_summ), stat_fun, .names = "{.col}-{.fn}"))
```

4. `pivot_longer(cols = ...`

- 요약 후 만들어진 여러 통계량 열(`ITEM_F001-mean`, `ITEM_F001-sd` 등)을 세로 형태(long format)로 펼친다.

- `names_sep = "-"`를 기준으로 ITEM과 STAT 두 부분으로 분리.

- 예: `ITEM_F001-mean` → ITEM = `ITEM_F001`, STAT = `mean`.

```{r}
#| eval: false

pivot_longer(cols = -c(!!!col1, !!!col2), names_to = c("ITEM", "STAT"), names_sep = "-", values_to = "value")
```

`cols = -c(!!!col1, !!!col2)`는 그룹 열을 제외한 모든 열을 `pivot_longer` 대상으로 삼는 것.

5. `dplyr::arrange(ITEM)`

`dplyr`패키지 안에 `arrange`함수를 쓴다는 의미이다.

- `ITEM`열 기준으로 정렬(오름차순)한다.

6. `dplyr::ungroup()`

- 그룹화를 해제한다(추가 연산에서 혼동을 막기 위해).

7. `if (stat_to_column) { ... } else { ... }`

- `stat_to_column`이 `TRUE`라면, `cols_to_col`과 `STAT` 모두를 열 이름으로 펼친다.

- 예: `[ SEX, YEAR, STAT ]` 조합이 열이 됨.

```{r}
#| eval: false

if (stat_to_column) { tab1 <- tab1 %>% pivot_wider(names_from = all_of(c(cols_to_col, "STAT")), values_from = value) }
```

- `stat_to_column = FALSE`이면, `cols_to_col`만 열 이름으로 사용해서 펼친다.

- 결과적으로 STAT은 데이터 행으로 남는다.

```{r}
#| eval: false

else { tab1 <- tab1 %>% pivot_wider(names_from = all_of(cols_to_col), values_from = value) }
```

설명만 보았을 때는 어려우니 뒤에 결과물을 보고 이해해보자.

### 직접만든 함수 적용 

첫번 째 통계표의 경우는 

- 행( row ) 그룹핑 기준: `TEST_SEX(성별)`, `TEST_AGE(나이)`

- 열( column ) 그룹핑 기준: `TEST_YEAR(검사연도)`

- 통계 함수를 적용할 열들: `ITEM_F001`, `ITEM_F002`

- 계산할 함수: `my_summ_func_2`

로 표를 만들어준다. 

```{r}
tab1 <- summ_function_general(df1_youth,
                              c("TEST_SEX", "TEST_AGE"),
                              c("TEST_YEAR"),
                              c("ITEM_F001", "ITEM_F002"),
                              stat_fun = my_summ_func_2)

head(tab1,20) %>% kbl() %>%kable_styling()
```

이후 `tab2`,`tab3`도 동일하게 알부분만 변경해서 통계표를 만든 결과이다.

```{r}
tab2 <- summ_function_general(df1_youth,
                              c("TEST_AGE"), 
                              c("TEST_YEAR", "TEST_SEX"),
                              c("ITEM_F001", "ITEM_F002"),
                              stat_fun = my_summ_func_2)

head(tab2,10) %>% kbl() %>%kable_styling()
```

```{r}
tab3 <- summ_function_general(df1_youth,
                              c("TEST_SEX", "TEST_AGE"),
                              c("TEST_YEAR"),
                              c("ITEM_F001", "ITEM_F002"),
                              stat_fun = my_summ_func_2,
                              stat_to_column = TRUE)

head(tab3,10) %>% kbl() %>%kable_styling()
```



## 질문과 태그

- 질문 

 1. 원시 데이터(raw data)는 언제나 복잡하고 다듬어야 할 부분이 많습니다. 여러분은 데이터를 보다 쉽게 이해할 수 있도록 요약하는 과정에서 `dplyr`과 `tidyr`의 어떤 기능을 가장 유용하게 활용하셨습니까?  
 
2. 데이터를 요약하는 과정에서 `group_by()`와 `summarize()` 함수의 역할은 무엇인지, 이를 활용한 실습에서 경험한 어려움이 있다면 무엇이었는지 고민해 보시기 바랍니다.  



- 태그

**데이터요약**, **dplyr**,  **tidyr**, **그룹별통계**  






